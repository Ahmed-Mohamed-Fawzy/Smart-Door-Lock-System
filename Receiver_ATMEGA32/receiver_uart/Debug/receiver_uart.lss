
receiver_uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003730  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00003730  000037a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002964  00000000  00000000  00003800  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ce0  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a9d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ab38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000adc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 c7 05 	call	0xb8e	; 0xb8e <main>
      7a:	0c 94 96 1b 	jmp	0x372c	; 0x372c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 eb       	ldi	r26, 0xB4	; 180
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 1a 1b 	jmp	0x3634	; 0x3634 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 eb       	ldi	r24, 0xB4	; 180
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2a 1b 	jmp	0x3654	; 0x3654 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 46 1b 	jmp	0x368c	; 0x368c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <Lcd_SmartFeaurtres>:
#include "util/delay.h"
#include "lcd.h"
#include "dc_motor.h"

void Lcd_SmartFeaurtres(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(0,0);
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
	LCD_displayString("AC Status:   ");
     b46:	80 e6       	ldi	r24, 0x60	; 96
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
	LCD_moveCursor(1,0);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
	LCD_displayString("Light Status:   ");
     b56:	8e e6       	ldi	r24, 0x6E	; 110
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
}
     b5e:	cf 91       	pop	r28
     b60:	df 91       	pop	r29
     b62:	08 95       	ret

00000b64 <Lcd_HomeScreen>:
void Lcd_HomeScreen(void)
{
     b64:	df 93       	push	r29
     b66:	cf 93       	push	r28
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     b6c:	0e 94 10 1a 	call	0x3420	; 0x3420 <LCD_clearScreen>
	LCD_displayString("   Smart Home   ");
     b70:	8f e7       	ldi	r24, 0x7F	; 127
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
	LCD_moveCursor(1,0);
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
	LCD_displayString(" We Always Here ");
     b80:	80 e9       	ldi	r24, 0x90	; 144
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <main>:
int main(void)
{
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	c1 58       	subi	r28, 0x81	; 129
     b9c:	d0 40       	sbci	r29, 0x00	; 0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	uint8 received_byte = 0;
     ba8:	fe 01       	movw	r30, r28
     baa:	ef 57       	subi	r30, 0x7F	; 127
     bac:	ff 4f       	sbci	r31, 0xFF	; 255
     bae:	10 82       	st	Z, r1
	uint8 AC_button_count=0;
     bb0:	fe 01       	movw	r30, r28
     bb2:	e0 58       	subi	r30, 0x80	; 128
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	10 82       	st	Z, r1
	uint8 Light_button_count=0;
     bb8:	fe 01       	movw	r30, r28
     bba:	e1 58       	subi	r30, 0x81	; 129
     bbc:	ff 4f       	sbci	r31, 0xFF	; 255
     bbe:	10 82       	st	Z, r1

	UART_init(9600);
     bc0:	60 e8       	ldi	r22, 0x80	; 128
     bc2:	75 e2       	ldi	r23, 0x25	; 37
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 1a 1a 	call	0x3434	; 0x3434 <UART_init>
	LCD_init();
     bcc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_init>
	Dc_Motor_Init();
     bd0:	0e 94 0e 0c 	call	0x181c	; 0x181c <Dc_Motor_Init>

	/*Set the direction of Motor Pins*/
	GPIO_setupPinDirection(PORTC_ID,PIN0_ID,PIN_OUTPUT);
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	41 e0       	ldi	r20, 0x01	; 1
     bda:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN1_ID,PIN_OUTPUT);
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	61 e0       	ldi	r22, 0x01	; 1
     be2:	41 e0       	ldi	r20, 0x01	; 1
     be4:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>

	/*Set the direction of AC Button Pin as input*/
	GPIO_setupPinDirection(PORTD_ID,PIN2_ID,PIN_INPUT);
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN2_ID,LOGIC_HIGH);
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	62 e0       	ldi	r22, 0x02	; 2
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>

	/*Set the direction of Light Button Pin as input*/
	GPIO_setupPinDirection(PORTD_ID,PIN3_ID,PIN_INPUT);
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,PIN3_ID,LOGIC_HIGH);
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>

	/*Set the direction of Light leds Pin as input*/
	GPIO_setupPortDirection(PORTB_ID,PORT_OUTPUT);
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	6f ef       	ldi	r22, 0xFF	; 255
     c1e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPortDirection>
	GPIO_writePort(PORTB_ID,0XFF);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	6f ef       	ldi	r22, 0xFF	; 255
     c26:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_writePort>

	Lcd_HomeScreen();
     c2a:	0e 94 b2 05 	call	0xb64	; 0xb64 <Lcd_HomeScreen>

	while(1)
	{
		/*This variable always receive from the 8051*/
		received_byte = UART_recieveByte();
     c2e:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <UART_recieveByte>
     c32:	fe 01       	movw	r30, r28
     c34:	ef 57       	subi	r30, 0x7F	; 127
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	80 83       	st	Z, r24
     c3a:	e6 c5       	rjmp	.+3020   	; 0x1808 <main+0xc7a>

		/* if receiver from 8051 char 'S' Means start */
		while(received_byte =='S')
		{
			Lcd_SmartFeaurtres();
     c3c:	0e 94 9b 05 	call	0xb36	; 0xb36 <Lcd_SmartFeaurtres>

			if(GPIO_readPin(PORTD_ID,PIN2_ID) == LOGIC_LOW)
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	62 e0       	ldi	r22, 0x02	; 2
     c44:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_readPin>
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <main+0xc0>
     c4c:	59 c2       	rjmp	.+1202   	; 0x1100 <main+0x572>
     c4e:	fe 01       	movw	r30, r28
     c50:	e5 58       	subi	r30, 0x85	; 133
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 ef       	ldi	r26, 0xF0	; 240
     c5a:	b1 e4       	ldi	r27, 0x41	; 65
     c5c:	80 83       	st	Z, r24
     c5e:	91 83       	std	Z+1, r25	; 0x01
     c60:	a2 83       	std	Z+2, r26	; 0x02
     c62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c64:	8e 01       	movw	r16, r28
     c66:	09 58       	subi	r16, 0x89	; 137
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	fe 01       	movw	r30, r28
     c6c:	e5 58       	subi	r30, 0x85	; 133
     c6e:	ff 4f       	sbci	r31, 0xFF	; 255
     c70:	60 81       	ld	r22, Z
     c72:	71 81       	ldd	r23, Z+1	; 0x01
     c74:	82 81       	ldd	r24, Z+2	; 0x02
     c76:	93 81       	ldd	r25, Z+3	; 0x03
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4a e7       	ldi	r20, 0x7A	; 122
     c7e:	55 e4       	ldi	r21, 0x45	; 69
     c80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	80 83       	st	Z, r24
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	a2 83       	std	Z+2, r26	; 0x02
     c90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c92:	fe 01       	movw	r30, r28
     c94:	e9 58       	subi	r30, 0x89	; 137
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	60 81       	ld	r22, Z
     c9a:	71 81       	ldd	r23, Z+1	; 0x01
     c9c:	82 81       	ldd	r24, Z+2	; 0x02
     c9e:	93 81       	ldd	r25, Z+3	; 0x03
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cac:	88 23       	and	r24, r24
     cae:	44 f4       	brge	.+16     	; 0xcc0 <main+0x132>
		__ticks = 1;
     cb0:	fe 01       	movw	r30, r28
     cb2:	eb 58       	subi	r30, 0x8B	; 139
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
     cbe:	64 c0       	rjmp	.+200    	; 0xd88 <main+0x1fa>
	else if (__tmp > 65535)
     cc0:	fe 01       	movw	r30, r28
     cc2:	e9 58       	subi	r30, 0x89	; 137
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	3f ef       	ldi	r19, 0xFF	; 255
     cd2:	4f e7       	ldi	r20, 0x7F	; 127
     cd4:	57 e4       	ldi	r21, 0x47	; 71
     cd6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cda:	18 16       	cp	r1, r24
     cdc:	0c f0       	brlt	.+2      	; 0xce0 <main+0x152>
     cde:	43 c0       	rjmp	.+134    	; 0xd66 <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce0:	fe 01       	movw	r30, r28
     ce2:	e5 58       	subi	r30, 0x85	; 133
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	40 e2       	ldi	r20, 0x20	; 32
     cf4:	51 e4       	ldi	r21, 0x41	; 65
     cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	8e 01       	movw	r16, r28
     d00:	0b 58       	subi	r16, 0x8B	; 139
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	bc 01       	movw	r22, r24
     d06:	cd 01       	movw	r24, r26
     d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	f8 01       	movw	r30, r16
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	80 83       	st	Z, r24
     d16:	1f c0       	rjmp	.+62     	; 0xd56 <main+0x1c8>
     d18:	fe 01       	movw	r30, r28
     d1a:	ed 58       	subi	r30, 0x8D	; 141
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 e9       	ldi	r24, 0x90	; 144
     d20:	91 e0       	ldi	r25, 0x01	; 1
     d22:	91 83       	std	Z+1, r25	; 0x01
     d24:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d26:	fe 01       	movw	r30, r28
     d28:	ed 58       	subi	r30, 0x8D	; 141
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <main+0x1a2>
     d34:	fe 01       	movw	r30, r28
     d36:	ed 58       	subi	r30, 0x8D	; 141
     d38:	ff 4f       	sbci	r31, 0xFF	; 255
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3e:	de 01       	movw	r26, r28
     d40:	ab 58       	subi	r26, 0x8B	; 139
     d42:	bf 4f       	sbci	r27, 0xFF	; 255
     d44:	fe 01       	movw	r30, r28
     d46:	eb 58       	subi	r30, 0x8B	; 139
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	80 81       	ld	r24, Z
     d4c:	91 81       	ldd	r25, Z+1	; 0x01
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	9c 93       	st	X, r25
     d54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	fe 01       	movw	r30, r28
     d58:	eb 58       	subi	r30, 0x8B	; 139
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	80 81       	ld	r24, Z
     d5e:	91 81       	ldd	r25, Z+1	; 0x01
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	d1 f6       	brne	.-76     	; 0xd18 <main+0x18a>
     d64:	27 c0       	rjmp	.+78     	; 0xdb4 <main+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d66:	8e 01       	movw	r16, r28
     d68:	0b 58       	subi	r16, 0x8B	; 139
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	fe 01       	movw	r30, r28
     d6e:	e9 58       	subi	r30, 0x89	; 137
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	f8 01       	movw	r30, r16
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
     d88:	de 01       	movw	r26, r28
     d8a:	af 58       	subi	r26, 0x8F	; 143
     d8c:	bf 4f       	sbci	r27, 0xFF	; 255
     d8e:	fe 01       	movw	r30, r28
     d90:	eb 58       	subi	r30, 0x8B	; 139
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	8d 93       	st	X+, r24
     d9a:	9c 93       	st	X, r25
     d9c:	fe 01       	movw	r30, r28
     d9e:	ef 58       	subi	r30, 0x8F	; 143
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	91 81       	ldd	r25, Z+1	; 0x01
     da6:	01 97       	sbiw	r24, 0x01	; 1
     da8:	f1 f7       	brne	.-4      	; 0xda6 <main+0x218>
     daa:	fe 01       	movw	r30, r28
     dac:	ef 58       	subi	r30, 0x8F	; 143
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	91 83       	std	Z+1, r25	; 0x01
     db2:	80 83       	st	Z, r24
			{
				_delay_ms(30);

				if(GPIO_readPin(PORTD_ID,PIN2_ID) == LOGIC_LOW)
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	62 e0       	ldi	r22, 0x02	; 2
     db8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_readPin>
     dbc:	88 23       	and	r24, r24
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <main+0x234>
     dc0:	9f c1       	rjmp	.+830    	; 0x1100 <main+0x572>
				{
					AC_button_count++;
     dc2:	de 01       	movw	r26, r28
     dc4:	a0 58       	subi	r26, 0x80	; 128
     dc6:	bf 4f       	sbci	r27, 0xFF	; 255
     dc8:	fe 01       	movw	r30, r28
     dca:	e0 58       	subi	r30, 0x80	; 128
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	8f 5f       	subi	r24, 0xFF	; 255
     dd2:	8c 93       	st	X, r24
					if(AC_button_count == 1)
     dd4:	fe 01       	movw	r30, r28
     dd6:	e0 58       	subi	r30, 0x80	; 128
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	80 81       	ld	r24, Z
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	09 f0       	breq	.+2      	; 0xde2 <main+0x254>
     de0:	c0 c0       	rjmp	.+384    	; 0xf62 <main+0x3d4>
					{
						LCD_moveCursor(0,10);
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	6a e0       	ldi	r22, 0x0A	; 10
     de6:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("ON");
     dea:	81 ea       	ldi	r24, 0xA1	; 161
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						Dc_Motor_Rotate(ROTATE_RIGHT);
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	0e 94 33 0c 	call	0x1866	; 0x1866 <Dc_Motor_Rotate>
     df8:	fe 01       	movw	r30, r28
     dfa:	e3 59       	subi	r30, 0x93	; 147
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	aa e7       	ldi	r26, 0x7A	; 122
     e04:	b4 e4       	ldi	r27, 0x44	; 68
     e06:	80 83       	st	Z, r24
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	a2 83       	std	Z+2, r26	; 0x02
     e0c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0e:	8e 01       	movw	r16, r28
     e10:	07 59       	subi	r16, 0x97	; 151
     e12:	1f 4f       	sbci	r17, 0xFF	; 255
     e14:	fe 01       	movw	r30, r28
     e16:	e3 59       	subi	r30, 0x93	; 147
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	93 81       	ldd	r25, Z+3	; 0x03
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4a e7       	ldi	r20, 0x7A	; 122
     e28:	55 e4       	ldi	r21, 0x45	; 69
     e2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	f8 01       	movw	r30, r16
     e34:	80 83       	st	Z, r24
     e36:	91 83       	std	Z+1, r25	; 0x01
     e38:	a2 83       	std	Z+2, r26	; 0x02
     e3a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e3c:	fe 01       	movw	r30, r28
     e3e:	e7 59       	subi	r30, 0x97	; 151
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	60 81       	ld	r22, Z
     e44:	71 81       	ldd	r23, Z+1	; 0x01
     e46:	82 81       	ldd	r24, Z+2	; 0x02
     e48:	93 81       	ldd	r25, Z+3	; 0x03
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e8       	ldi	r20, 0x80	; 128
     e50:	5f e3       	ldi	r21, 0x3F	; 63
     e52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e56:	88 23       	and	r24, r24
     e58:	44 f4       	brge	.+16     	; 0xe6a <main+0x2dc>
		__ticks = 1;
     e5a:	fe 01       	movw	r30, r28
     e5c:	e9 59       	subi	r30, 0x99	; 153
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	80 83       	st	Z, r24
     e68:	64 c0       	rjmp	.+200    	; 0xf32 <main+0x3a4>
	else if (__tmp > 65535)
     e6a:	fe 01       	movw	r30, r28
     e6c:	e7 59       	subi	r30, 0x97	; 151
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	93 81       	ldd	r25, Z+3	; 0x03
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	3f ef       	ldi	r19, 0xFF	; 255
     e7c:	4f e7       	ldi	r20, 0x7F	; 127
     e7e:	57 e4       	ldi	r21, 0x47	; 71
     e80:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e84:	18 16       	cp	r1, r24
     e86:	0c f0       	brlt	.+2      	; 0xe8a <main+0x2fc>
     e88:	43 c0       	rjmp	.+134    	; 0xf10 <main+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8a:	fe 01       	movw	r30, r28
     e8c:	e3 59       	subi	r30, 0x93	; 147
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	60 81       	ld	r22, Z
     e92:	71 81       	ldd	r23, Z+1	; 0x01
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e2       	ldi	r20, 0x20	; 32
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8e 01       	movw	r16, r28
     eaa:	09 59       	subi	r16, 0x99	; 153
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	f8 01       	movw	r30, r16
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	1f c0       	rjmp	.+62     	; 0xf00 <main+0x372>
     ec2:	fe 01       	movw	r30, r28
     ec4:	eb 59       	subi	r30, 0x9B	; 155
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	80 e9       	ldi	r24, 0x90	; 144
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	80 83       	st	Z, r24
     ed0:	fe 01       	movw	r30, r28
     ed2:	eb 59       	subi	r30, 0x9B	; 155
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <main+0x34c>
     ede:	fe 01       	movw	r30, r28
     ee0:	eb 59       	subi	r30, 0x9B	; 155
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee8:	de 01       	movw	r26, r28
     eea:	a9 59       	subi	r26, 0x99	; 153
     eec:	bf 4f       	sbci	r27, 0xFF	; 255
     eee:	fe 01       	movw	r30, r28
     ef0:	e9 59       	subi	r30, 0x99	; 153
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	9c 93       	st	X, r25
     efe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	fe 01       	movw	r30, r28
     f02:	e9 59       	subi	r30, 0x99	; 153
     f04:	ff 4f       	sbci	r31, 0xFF	; 255
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	d1 f6       	brne	.-76     	; 0xec2 <main+0x334>
     f0e:	f2 c0       	rjmp	.+484    	; 0x10f4 <main+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f10:	8e 01       	movw	r16, r28
     f12:	09 59       	subi	r16, 0x99	; 153
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	fe 01       	movw	r30, r28
     f18:	e7 59       	subi	r30, 0x97	; 151
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	82 81       	ldd	r24, Z+2	; 0x02
     f22:	93 81       	ldd	r25, Z+3	; 0x03
     f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	f8 01       	movw	r30, r16
     f2e:	91 83       	std	Z+1, r25	; 0x01
     f30:	80 83       	st	Z, r24
     f32:	de 01       	movw	r26, r28
     f34:	ad 59       	subi	r26, 0x9D	; 157
     f36:	bf 4f       	sbci	r27, 0xFF	; 255
     f38:	fe 01       	movw	r30, r28
     f3a:	e9 59       	subi	r30, 0x99	; 153
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	91 81       	ldd	r25, Z+1	; 0x01
     f42:	11 96       	adiw	r26, 0x01	; 1
     f44:	9c 93       	st	X, r25
     f46:	8e 93       	st	-X, r24
     f48:	fe 01       	movw	r30, r28
     f4a:	ed 59       	subi	r30, 0x9D	; 157
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	80 81       	ld	r24, Z
     f50:	91 81       	ldd	r25, Z+1	; 0x01
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <main+0x3c4>
     f56:	fe 01       	movw	r30, r28
     f58:	ed 59       	subi	r30, 0x9D	; 157
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
     f60:	c9 c0       	rjmp	.+402    	; 0x10f4 <main+0x566>
						_delay_ms(1000);
					}
					else if(AC_button_count == 2)
     f62:	fe 01       	movw	r30, r28
     f64:	e0 58       	subi	r30, 0x80	; 128
     f66:	ff 4f       	sbci	r31, 0xFF	; 255
     f68:	80 81       	ld	r24, Z
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	09 f0       	breq	.+2      	; 0xf70 <main+0x3e2>
     f6e:	c2 c0       	rjmp	.+388    	; 0x10f4 <main+0x566>
					{
						AC_button_count = 0;
     f70:	fe 01       	movw	r30, r28
     f72:	e0 58       	subi	r30, 0x80	; 128
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	10 82       	st	Z, r1
						LCD_moveCursor(0,10);
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	6a e0       	ldi	r22, 0x0A	; 10
     f7c:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("OFF");
     f80:	84 ea       	ldi	r24, 0xA4	; 164
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						Dc_Motor_Rotate(ROTATE_STOP);
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	0e 94 33 0c 	call	0x1866	; 0x1866 <Dc_Motor_Rotate>
     f8e:	fe 01       	movw	r30, r28
     f90:	e1 5a       	subi	r30, 0xA1	; 161
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	aa e7       	ldi	r26, 0x7A	; 122
     f9a:	b4 e4       	ldi	r27, 0x44	; 68
     f9c:	80 83       	st	Z, r24
     f9e:	91 83       	std	Z+1, r25	; 0x01
     fa0:	a2 83       	std	Z+2, r26	; 0x02
     fa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa4:	8e 01       	movw	r16, r28
     fa6:	05 5a       	subi	r16, 0xA5	; 165
     fa8:	1f 4f       	sbci	r17, 0xFF	; 255
     faa:	fe 01       	movw	r30, r28
     fac:	e1 5a       	subi	r30, 0xA1	; 161
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	4a e7       	ldi	r20, 0x7A	; 122
     fbe:	55 e4       	ldi	r21, 0x45	; 69
     fc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc4:	dc 01       	movw	r26, r24
     fc6:	cb 01       	movw	r24, r22
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24
     fcc:	91 83       	std	Z+1, r25	; 0x01
     fce:	a2 83       	std	Z+2, r26	; 0x02
     fd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fd2:	fe 01       	movw	r30, r28
     fd4:	e5 5a       	subi	r30, 0xA5	; 165
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	60 81       	ld	r22, Z
     fda:	71 81       	ldd	r23, Z+1	; 0x01
     fdc:	82 81       	ldd	r24, Z+2	; 0x02
     fde:	93 81       	ldd	r25, Z+3	; 0x03
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e8       	ldi	r20, 0x80	; 128
     fe6:	5f e3       	ldi	r21, 0x3F	; 63
     fe8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fec:	88 23       	and	r24, r24
     fee:	44 f4       	brge	.+16     	; 0x1000 <main+0x472>
		__ticks = 1;
     ff0:	fe 01       	movw	r30, r28
     ff2:	e7 5a       	subi	r30, 0xA7	; 167
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	91 83       	std	Z+1, r25	; 0x01
     ffc:	80 83       	st	Z, r24
     ffe:	64 c0       	rjmp	.+200    	; 0x10c8 <main+0x53a>
	else if (__tmp > 65535)
    1000:	fe 01       	movw	r30, r28
    1002:	e5 5a       	subi	r30, 0xA5	; 165
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	0c f0       	brlt	.+2      	; 0x1020 <main+0x492>
    101e:	43 c0       	rjmp	.+134    	; 0x10a6 <main+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	fe 01       	movw	r30, r28
    1022:	e1 5a       	subi	r30, 0xA1	; 161
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	60 81       	ld	r22, Z
    1028:	71 81       	ldd	r23, Z+1	; 0x01
    102a:	82 81       	ldd	r24, Z+2	; 0x02
    102c:	93 81       	ldd	r25, Z+3	; 0x03
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e2       	ldi	r20, 0x20	; 32
    1034:	51 e4       	ldi	r21, 0x41	; 65
    1036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8e 01       	movw	r16, r28
    1040:	07 5a       	subi	r16, 0xA7	; 167
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	bc 01       	movw	r22, r24
    1046:	cd 01       	movw	r24, r26
    1048:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	f8 01       	movw	r30, r16
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
    1056:	1f c0       	rjmp	.+62     	; 0x1096 <main+0x508>
    1058:	fe 01       	movw	r30, r28
    105a:	e9 5a       	subi	r30, 0xA9	; 169
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	80 e9       	ldi	r24, 0x90	; 144
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
    1066:	fe 01       	movw	r30, r28
    1068:	e9 5a       	subi	r30, 0xA9	; 169
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	80 81       	ld	r24, Z
    106e:	91 81       	ldd	r25, Z+1	; 0x01
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <main+0x4e2>
    1074:	fe 01       	movw	r30, r28
    1076:	e9 5a       	subi	r30, 0xA9	; 169
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	de 01       	movw	r26, r28
    1080:	a7 5a       	subi	r26, 0xA7	; 167
    1082:	bf 4f       	sbci	r27, 0xFF	; 255
    1084:	fe 01       	movw	r30, r28
    1086:	e7 5a       	subi	r30, 0xA7	; 167
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	9c 93       	st	X, r25
    1094:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1096:	fe 01       	movw	r30, r28
    1098:	e7 5a       	subi	r30, 0xA7	; 167
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	d1 f6       	brne	.-76     	; 0x1058 <main+0x4ca>
    10a4:	27 c0       	rjmp	.+78     	; 0x10f4 <main+0x566>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	8e 01       	movw	r16, r28
    10a8:	07 5a       	subi	r16, 0xA7	; 167
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	e5 5a       	subi	r30, 0xA5	; 165
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	f8 01       	movw	r30, r16
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
    10c8:	de 01       	movw	r26, r28
    10ca:	ab 5a       	subi	r26, 0xAB	; 171
    10cc:	bf 4f       	sbci	r27, 0xFF	; 255
    10ce:	fe 01       	movw	r30, r28
    10d0:	e7 5a       	subi	r30, 0xA7	; 167
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	8d 93       	st	X+, r24
    10da:	9c 93       	st	X, r25
    10dc:	fe 01       	movw	r30, r28
    10de:	eb 5a       	subi	r30, 0xAB	; 171
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	80 81       	ld	r24, Z
    10e4:	91 81       	ldd	r25, Z+1	; 0x01
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <main+0x558>
    10ea:	fe 01       	movw	r30, r28
    10ec:	eb 5a       	subi	r30, 0xAB	; 171
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	91 83       	std	Z+1, r25	; 0x01
    10f2:	80 83       	st	Z, r24
					else
					{
						/* Do No Thing*/
					}

					while(GPIO_readPin(PORTD_ID,PIN2_ID) == LOGIC_LOW);
    10f4:	83 e0       	ldi	r24, 0x03	; 3
    10f6:	62 e0       	ldi	r22, 0x02	; 2
    10f8:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_readPin>
    10fc:	88 23       	and	r24, r24
    10fe:	d1 f3       	breq	.-12     	; 0x10f4 <main+0x566>
				{
					//Do no thing
				}
			}

			if(GPIO_readPin(PORTD_ID,PIN3_ID) == LOGIC_LOW)
    1100:	83 e0       	ldi	r24, 0x03	; 3
    1102:	63 e0       	ldi	r22, 0x03	; 3
    1104:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_readPin>
    1108:	88 23       	and	r24, r24
    110a:	09 f0       	breq	.+2      	; 0x110e <main+0x580>
    110c:	7d c3       	rjmp	.+1786   	; 0x1808 <main+0xc7a>
    110e:	fe 01       	movw	r30, r28
    1110:	ef 5a       	subi	r30, 0xAF	; 175
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 ef       	ldi	r26, 0xF0	; 240
    111a:	b1 e4       	ldi	r27, 0x41	; 65
    111c:	80 83       	st	Z, r24
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	a2 83       	std	Z+2, r26	; 0x02
    1122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	8e 01       	movw	r16, r28
    1126:	03 5b       	subi	r16, 0xB3	; 179
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	fe 01       	movw	r30, r28
    112c:	ef 5a       	subi	r30, 0xAF	; 175
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	4a e7       	ldi	r20, 0x7A	; 122
    113e:	55 e4       	ldi	r21, 0x45	; 69
    1140:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	f8 01       	movw	r30, r16
    114a:	80 83       	st	Z, r24
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1152:	fe 01       	movw	r30, r28
    1154:	e3 5b       	subi	r30, 0xB3	; 179
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	60 81       	ld	r22, Z
    115a:	71 81       	ldd	r23, Z+1	; 0x01
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    116c:	88 23       	and	r24, r24
    116e:	44 f4       	brge	.+16     	; 0x1180 <main+0x5f2>
		__ticks = 1;
    1170:	fe 01       	movw	r30, r28
    1172:	e5 5b       	subi	r30, 0xB5	; 181
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	64 c0       	rjmp	.+200    	; 0x1248 <main+0x6ba>
	else if (__tmp > 65535)
    1180:	fe 01       	movw	r30, r28
    1182:	e3 5b       	subi	r30, 0xB3	; 179
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	0c f0       	brlt	.+2      	; 0x11a0 <main+0x612>
    119e:	43 c0       	rjmp	.+134    	; 0x1226 <main+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	fe 01       	movw	r30, r28
    11a2:	ef 5a       	subi	r30, 0xAF	; 175
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	8e 01       	movw	r16, r28
    11c0:	05 5b       	subi	r16, 0xB5	; 181
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	f8 01       	movw	r30, r16
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	1f c0       	rjmp	.+62     	; 0x1216 <main+0x688>
    11d8:	fe 01       	movw	r30, r28
    11da:	e7 5b       	subi	r30, 0xB7	; 183
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	80 e9       	ldi	r24, 0x90	; 144
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
    11e6:	fe 01       	movw	r30, r28
    11e8:	e7 5b       	subi	r30, 0xB7	; 183
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <main+0x662>
    11f4:	fe 01       	movw	r30, r28
    11f6:	e7 5b       	subi	r30, 0xB7	; 183
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	de 01       	movw	r26, r28
    1200:	a5 5b       	subi	r26, 0xB5	; 181
    1202:	bf 4f       	sbci	r27, 0xFF	; 255
    1204:	fe 01       	movw	r30, r28
    1206:	e5 5b       	subi	r30, 0xB5	; 181
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	9c 93       	st	X, r25
    1214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	fe 01       	movw	r30, r28
    1218:	e5 5b       	subi	r30, 0xB5	; 181
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	d1 f6       	brne	.-76     	; 0x11d8 <main+0x64a>
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <main+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	8e 01       	movw	r16, r28
    1228:	05 5b       	subi	r16, 0xB5	; 181
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	fe 01       	movw	r30, r28
    122e:	e3 5b       	subi	r30, 0xB3	; 179
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	f8 01       	movw	r30, r16
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
    1248:	de 01       	movw	r26, r28
    124a:	a9 5b       	subi	r26, 0xB9	; 185
    124c:	bf 4f       	sbci	r27, 0xFF	; 255
    124e:	fe 01       	movw	r30, r28
    1250:	e5 5b       	subi	r30, 0xB5	; 181
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	8d 93       	st	X+, r24
    125a:	9c 93       	st	X, r25
    125c:	fe 01       	movw	r30, r28
    125e:	e9 5b       	subi	r30, 0xB9	; 185
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <main+0x6d8>
    126a:	fe 01       	movw	r30, r28
    126c:	e9 5b       	subi	r30, 0xB9	; 185
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
			{
				_delay_ms(30);

				if(GPIO_readPin(PORTD_ID,PIN3_ID) == LOGIC_LOW)
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	63 e0       	ldi	r22, 0x03	; 3
    1278:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_readPin>
    127c:	88 23       	and	r24, r24
    127e:	09 f0       	breq	.+2      	; 0x1282 <main+0x6f4>
    1280:	c3 c2       	rjmp	.+1414   	; 0x1808 <main+0xc7a>
				{
					Light_button_count++;
    1282:	de 01       	movw	r26, r28
    1284:	a1 58       	subi	r26, 0x81	; 129
    1286:	bf 4f       	sbci	r27, 0xFF	; 255
    1288:	fe 01       	movw	r30, r28
    128a:	e1 58       	subi	r30, 0x81	; 129
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	8c 93       	st	X, r24
					if(Light_button_count == 1)
    1294:	fe 01       	movw	r30, r28
    1296:	e1 58       	subi	r30, 0x81	; 129
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	80 81       	ld	r24, Z
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <main+0x714>
    12a0:	92 c0       	rjmp	.+292    	; 0x13c6 <main+0x838>
					{
						LCD_moveCursor(1,14);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	6e e0       	ldi	r22, 0x0E	; 14
    12a6:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("M1");
    12aa:	88 ea       	ldi	r24, 0xA8	; 168
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						GPIO_writePort(PORTB_ID,0XFC);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	6c ef       	ldi	r22, 0xFC	; 252
    12b6:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_writePort>
    12ba:	fe 01       	movw	r30, r28
    12bc:	ed 5b       	subi	r30, 0xBD	; 189
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	aa ef       	ldi	r26, 0xFA	; 250
    12c6:	b3 e4       	ldi	r27, 0x43	; 67
    12c8:	80 83       	st	Z, r24
    12ca:	91 83       	std	Z+1, r25	; 0x01
    12cc:	a2 83       	std	Z+2, r26	; 0x02
    12ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d0:	8e 01       	movw	r16, r28
    12d2:	01 5c       	subi	r16, 0xC1	; 193
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
    12d6:	fe 01       	movw	r30, r28
    12d8:	ed 5b       	subi	r30, 0xBD	; 189
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a e7       	ldi	r20, 0x7A	; 122
    12ea:	55 e4       	ldi	r21, 0x45	; 69
    12ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	f8 01       	movw	r30, r16
    12f6:	80 83       	st	Z, r24
    12f8:	91 83       	std	Z+1, r25	; 0x01
    12fa:	a2 83       	std	Z+2, r26	; 0x02
    12fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fe:	fe 01       	movw	r30, r28
    1300:	ff 96       	adiw	r30, 0x3f	; 63
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e8       	ldi	r20, 0x80	; 128
    1310:	5f e3       	ldi	r21, 0x3F	; 63
    1312:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1316:	88 23       	and	r24, r24
    1318:	2c f4       	brge	.+10     	; 0x1324 <main+0x796>
		__ticks = 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9e af       	std	Y+62, r25	; 0x3e
    1320:	8d af       	std	Y+61, r24	; 0x3d
    1322:	46 c0       	rjmp	.+140    	; 0x13b0 <main+0x822>
	else if (__tmp > 65535)
    1324:	fe 01       	movw	r30, r28
    1326:	ff 96       	adiw	r30, 0x3f	; 63
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	3f ef       	ldi	r19, 0xFF	; 255
    1334:	4f e7       	ldi	r20, 0x7F	; 127
    1336:	57 e4       	ldi	r21, 0x47	; 71
    1338:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    133c:	18 16       	cp	r1, r24
    133e:	64 f5       	brge	.+88     	; 0x1398 <main+0x80a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1340:	fe 01       	movw	r30, r28
    1342:	ed 5b       	subi	r30, 0xBD	; 189
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	60 81       	ld	r22, Z
    1348:	71 81       	ldd	r23, Z+1	; 0x01
    134a:	82 81       	ldd	r24, Z+2	; 0x02
    134c:	93 81       	ldd	r25, Z+3	; 0x03
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9e af       	std	Y+62, r25	; 0x3e
    136c:	8d af       	std	Y+61, r24	; 0x3d
    136e:	0f c0       	rjmp	.+30     	; 0x138e <main+0x800>
    1370:	80 e9       	ldi	r24, 0x90	; 144
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	9c af       	std	Y+60, r25	; 0x3c
    1376:	8b af       	std	Y+59, r24	; 0x3b
    1378:	8b ad       	ldd	r24, Y+59	; 0x3b
    137a:	9c ad       	ldd	r25, Y+60	; 0x3c
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <main+0x7ee>
    1380:	9c af       	std	Y+60, r25	; 0x3c
    1382:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	8d ad       	ldd	r24, Y+61	; 0x3d
    1386:	9e ad       	ldd	r25, Y+62	; 0x3e
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9e af       	std	Y+62, r25	; 0x3e
    138c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1390:	9e ad       	ldd	r25, Y+62	; 0x3e
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <main+0x7e2>
    1396:	32 c2       	rjmp	.+1124   	; 0x17fc <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	fe 01       	movw	r30, r28
    139a:	ff 96       	adiw	r30, 0x3f	; 63
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9e af       	std	Y+62, r25	; 0x3e
    13ae:	8d af       	std	Y+61, r24	; 0x3d
    13b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b4:	9a af       	std	Y+58, r25	; 0x3a
    13b6:	89 af       	std	Y+57, r24	; 0x39
    13b8:	89 ad       	ldd	r24, Y+57	; 0x39
    13ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <main+0x82e>
    13c0:	9a af       	std	Y+58, r25	; 0x3a
    13c2:	89 af       	std	Y+57, r24	; 0x39
    13c4:	1b c2       	rjmp	.+1078   	; 0x17fc <main+0xc6e>
						_delay_ms(500);
					}
					else if(Light_button_count == 2)
    13c6:	fe 01       	movw	r30, r28
    13c8:	e1 58       	subi	r30, 0x81	; 129
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <main+0x846>
    13d2:	7f c0       	rjmp	.+254    	; 0x14d2 <main+0x944>
					{
						LCD_moveCursor(1,14);
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	6e e0       	ldi	r22, 0x0E	; 14
    13d8:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("M2");
    13dc:	8b ea       	ldi	r24, 0xAB	; 171
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						GPIO_writePort(PORTB_ID,0XF3);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	63 ef       	ldi	r22, 0xF3	; 243
    13e8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_writePort>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	aa ef       	ldi	r26, 0xFA	; 250
    13f2:	b3 e4       	ldi	r27, 0x43	; 67
    13f4:	8d ab       	std	Y+53, r24	; 0x35
    13f6:	9e ab       	std	Y+54, r25	; 0x36
    13f8:	af ab       	std	Y+55, r26	; 0x37
    13fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fc:	6d a9       	ldd	r22, Y+53	; 0x35
    13fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1400:	8f a9       	ldd	r24, Y+55	; 0x37
    1402:	98 ad       	ldd	r25, Y+56	; 0x38
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	4a e7       	ldi	r20, 0x7A	; 122
    140a:	55 e4       	ldi	r21, 0x45	; 69
    140c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	89 ab       	std	Y+49, r24	; 0x31
    1416:	9a ab       	std	Y+50, r25	; 0x32
    1418:	ab ab       	std	Y+51, r26	; 0x33
    141a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    141c:	69 a9       	ldd	r22, Y+49	; 0x31
    141e:	7a a9       	ldd	r23, Y+50	; 0x32
    1420:	8b a9       	ldd	r24, Y+51	; 0x33
    1422:	9c a9       	ldd	r25, Y+52	; 0x34
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e8       	ldi	r20, 0x80	; 128
    142a:	5f e3       	ldi	r21, 0x3F	; 63
    142c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1430:	88 23       	and	r24, r24
    1432:	2c f4       	brge	.+10     	; 0x143e <main+0x8b0>
		__ticks = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	98 ab       	std	Y+48, r25	; 0x30
    143a:	8f a7       	std	Y+47, r24	; 0x2f
    143c:	3f c0       	rjmp	.+126    	; 0x14bc <main+0x92e>
	else if (__tmp > 65535)
    143e:	69 a9       	ldd	r22, Y+49	; 0x31
    1440:	7a a9       	ldd	r23, Y+50	; 0x32
    1442:	8b a9       	ldd	r24, Y+51	; 0x33
    1444:	9c a9       	ldd	r25, Y+52	; 0x34
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	3f ef       	ldi	r19, 0xFF	; 255
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	57 e4       	ldi	r21, 0x47	; 71
    144e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	4c f5       	brge	.+82     	; 0x14a8 <main+0x91a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1456:	6d a9       	ldd	r22, Y+53	; 0x35
    1458:	7e a9       	ldd	r23, Y+54	; 0x36
    145a:	8f a9       	ldd	r24, Y+55	; 0x37
    145c:	98 ad       	ldd	r25, Y+56	; 0x38
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e2       	ldi	r20, 0x20	; 32
    1464:	51 e4       	ldi	r21, 0x41	; 65
    1466:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	98 ab       	std	Y+48, r25	; 0x30
    147c:	8f a7       	std	Y+47, r24	; 0x2f
    147e:	0f c0       	rjmp	.+30     	; 0x149e <main+0x910>
    1480:	80 e9       	ldi	r24, 0x90	; 144
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	9e a7       	std	Y+46, r25	; 0x2e
    1486:	8d a7       	std	Y+45, r24	; 0x2d
    1488:	8d a5       	ldd	r24, Y+45	; 0x2d
    148a:	9e a5       	ldd	r25, Y+46	; 0x2e
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <main+0x8fe>
    1490:	9e a7       	std	Y+46, r25	; 0x2e
    1492:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1494:	8f a5       	ldd	r24, Y+47	; 0x2f
    1496:	98 a9       	ldd	r25, Y+48	; 0x30
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	98 ab       	std	Y+48, r25	; 0x30
    149c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149e:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a0:	98 a9       	ldd	r25, Y+48	; 0x30
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	69 f7       	brne	.-38     	; 0x1480 <main+0x8f2>
    14a6:	aa c1       	rjmp	.+852    	; 0x17fc <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a8:	69 a9       	ldd	r22, Y+49	; 0x31
    14aa:	7a a9       	ldd	r23, Y+50	; 0x32
    14ac:	8b a9       	ldd	r24, Y+51	; 0x33
    14ae:	9c a9       	ldd	r25, Y+52	; 0x34
    14b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	98 ab       	std	Y+48, r25	; 0x30
    14ba:	8f a7       	std	Y+47, r24	; 0x2f
    14bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14be:	98 a9       	ldd	r25, Y+48	; 0x30
    14c0:	9c a7       	std	Y+44, r25	; 0x2c
    14c2:	8b a7       	std	Y+43, r24	; 0x2b
    14c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <main+0x93a>
    14cc:	9c a7       	std	Y+44, r25	; 0x2c
    14ce:	8b a7       	std	Y+43, r24	; 0x2b
    14d0:	95 c1       	rjmp	.+810    	; 0x17fc <main+0xc6e>
						_delay_ms(500);
					}
					else if(Light_button_count == 3)
    14d2:	fe 01       	movw	r30, r28
    14d4:	e1 58       	subi	r30, 0x81	; 129
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	80 81       	ld	r24, Z
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <main+0x952>
    14de:	7f c0       	rjmp	.+254    	; 0x15de <main+0xa50>
					{
						LCD_moveCursor(1,14);
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	6e e0       	ldi	r22, 0x0E	; 14
    14e4:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("M3");
    14e8:	8e ea       	ldi	r24, 0xAE	; 174
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						GPIO_writePort(PORTB_ID,0XCF);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	6f ec       	ldi	r22, 0xCF	; 207
    14f4:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_writePort>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	aa ef       	ldi	r26, 0xFA	; 250
    14fe:	b3 e4       	ldi	r27, 0x43	; 67
    1500:	8f a3       	std	Y+39, r24	; 0x27
    1502:	98 a7       	std	Y+40, r25	; 0x28
    1504:	a9 a7       	std	Y+41, r26	; 0x29
    1506:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6f a1       	ldd	r22, Y+39	; 0x27
    150a:	78 a5       	ldd	r23, Y+40	; 0x28
    150c:	89 a5       	ldd	r24, Y+41	; 0x29
    150e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a e7       	ldi	r20, 0x7A	; 122
    1516:	55 e4       	ldi	r21, 0x45	; 69
    1518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	8b a3       	std	Y+35, r24	; 0x23
    1522:	9c a3       	std	Y+36, r25	; 0x24
    1524:	ad a3       	std	Y+37, r26	; 0x25
    1526:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1528:	6b a1       	ldd	r22, Y+35	; 0x23
    152a:	7c a1       	ldd	r23, Y+36	; 0x24
    152c:	8d a1       	ldd	r24, Y+37	; 0x25
    152e:	9e a1       	ldd	r25, Y+38	; 0x26
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <main+0x9bc>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	9a a3       	std	Y+34, r25	; 0x22
    1546:	89 a3       	std	Y+33, r24	; 0x21
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <main+0xa3a>
	else if (__tmp > 65535)
    154a:	6b a1       	ldd	r22, Y+35	; 0x23
    154c:	7c a1       	ldd	r23, Y+36	; 0x24
    154e:	8d a1       	ldd	r24, Y+37	; 0x25
    1550:	9e a1       	ldd	r25, Y+38	; 0x26
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <main+0xa26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6f a1       	ldd	r22, Y+39	; 0x27
    1564:	78 a5       	ldd	r23, Y+40	; 0x28
    1566:	89 a5       	ldd	r24, Y+41	; 0x29
    1568:	9a a5       	ldd	r25, Y+42	; 0x2a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9a a3       	std	Y+34, r25	; 0x22
    1588:	89 a3       	std	Y+33, r24	; 0x21
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <main+0xa1c>
    158c:	80 e9       	ldi	r24, 0x90	; 144
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	98 a3       	std	Y+32, r25	; 0x20
    1592:	8f 8f       	std	Y+31, r24	; 0x1f
    1594:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1596:	98 a1       	ldd	r25, Y+32	; 0x20
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <main+0xa0a>
    159c:	98 a3       	std	Y+32, r25	; 0x20
    159e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	89 a1       	ldd	r24, Y+33	; 0x21
    15a2:	9a a1       	ldd	r25, Y+34	; 0x22
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9a a3       	std	Y+34, r25	; 0x22
    15a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	89 a1       	ldd	r24, Y+33	; 0x21
    15ac:	9a a1       	ldd	r25, Y+34	; 0x22
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <main+0x9fe>
    15b2:	24 c1       	rjmp	.+584    	; 0x17fc <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	6b a1       	ldd	r22, Y+35	; 0x23
    15b6:	7c a1       	ldd	r23, Y+36	; 0x24
    15b8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ba:	9e a1       	ldd	r25, Y+38	; 0x26
    15bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9a a3       	std	Y+34, r25	; 0x22
    15c6:	89 a3       	std	Y+33, r24	; 0x21
    15c8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ca:	9a a1       	ldd	r25, Y+34	; 0x22
    15cc:	9e 8f       	std	Y+30, r25	; 0x1e
    15ce:	8d 8f       	std	Y+29, r24	; 0x1d
    15d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <main+0xa46>
    15d8:	9e 8f       	std	Y+30, r25	; 0x1e
    15da:	8d 8f       	std	Y+29, r24	; 0x1d
    15dc:	0f c1       	rjmp	.+542    	; 0x17fc <main+0xc6e>
						_delay_ms(500);
					}
					else if(Light_button_count == 4)
    15de:	fe 01       	movw	r30, r28
    15e0:	e1 58       	subi	r30, 0x81	; 129
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	84 30       	cpi	r24, 0x04	; 4
    15e8:	09 f0       	breq	.+2      	; 0x15ec <main+0xa5e>
    15ea:	7f c0       	rjmp	.+254    	; 0x16ea <main+0xb5c>
					{

						LCD_moveCursor(1,14);
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	6e e0       	ldi	r22, 0x0E	; 14
    15f0:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("M4");
    15f4:	81 eb       	ldi	r24, 0xB1	; 177
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						GPIO_writePort(PORTB_ID,0X3F);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	6f e3       	ldi	r22, 0x3F	; 63
    1600:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_writePort>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	aa ef       	ldi	r26, 0xFA	; 250
    160a:	b3 e4       	ldi	r27, 0x43	; 67
    160c:	89 8f       	std	Y+25, r24	; 0x19
    160e:	9a 8f       	std	Y+26, r25	; 0x1a
    1610:	ab 8f       	std	Y+27, r26	; 0x1b
    1612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	69 8d       	ldd	r22, Y+25	; 0x19
    1616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a e7       	ldi	r20, 0x7A	; 122
    1622:	55 e4       	ldi	r21, 0x45	; 69
    1624:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8d 8b       	std	Y+21, r24	; 0x15
    162e:	9e 8b       	std	Y+22, r25	; 0x16
    1630:	af 8b       	std	Y+23, r26	; 0x17
    1632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1634:	6d 89       	ldd	r22, Y+21	; 0x15
    1636:	7e 89       	ldd	r23, Y+22	; 0x16
    1638:	8f 89       	ldd	r24, Y+23	; 0x17
    163a:	98 8d       	ldd	r25, Y+24	; 0x18
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <main+0xac8>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9c 8b       	std	Y+20, r25	; 0x14
    1652:	8b 8b       	std	Y+19, r24	; 0x13
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <main+0xb46>
	else if (__tmp > 65535)
    1656:	6d 89       	ldd	r22, Y+21	; 0x15
    1658:	7e 89       	ldd	r23, Y+22	; 0x16
    165a:	8f 89       	ldd	r24, Y+23	; 0x17
    165c:	98 8d       	ldd	r25, Y+24	; 0x18
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <main+0xb32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	69 8d       	ldd	r22, Y+25	; 0x19
    1670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9c 8b       	std	Y+20, r25	; 0x14
    1694:	8b 8b       	std	Y+19, r24	; 0x13
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <main+0xb28>
    1698:	80 e9       	ldi	r24, 0x90	; 144
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	9a 8b       	std	Y+18, r25	; 0x12
    169e:	89 8b       	std	Y+17, r24	; 0x11
    16a0:	89 89       	ldd	r24, Y+17	; 0x11
    16a2:	9a 89       	ldd	r25, Y+18	; 0x12
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <main+0xb16>
    16a8:	9a 8b       	std	Y+18, r25	; 0x12
    16aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	8b 89       	ldd	r24, Y+19	; 0x13
    16ae:	9c 89       	ldd	r25, Y+20	; 0x14
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <main+0xb0a>
    16be:	9e c0       	rjmp	.+316    	; 0x17fc <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	6d 89       	ldd	r22, Y+21	; 0x15
    16c2:	7e 89       	ldd	r23, Y+22	; 0x16
    16c4:	8f 89       	ldd	r24, Y+23	; 0x17
    16c6:	98 8d       	ldd	r25, Y+24	; 0x18
    16c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
    16d2:	8b 8b       	std	Y+19, r24	; 0x13
    16d4:	8b 89       	ldd	r24, Y+19	; 0x13
    16d6:	9c 89       	ldd	r25, Y+20	; 0x14
    16d8:	98 8b       	std	Y+16, r25	; 0x10
    16da:	8f 87       	std	Y+15, r24	; 0x0f
    16dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16de:	98 89       	ldd	r25, Y+16	; 0x10
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <main+0xb52>
    16e4:	98 8b       	std	Y+16, r25	; 0x10
    16e6:	8f 87       	std	Y+15, r24	; 0x0f
    16e8:	89 c0       	rjmp	.+274    	; 0x17fc <main+0xc6e>
						_delay_ms(500);
					}
					else if(Light_button_count == 5)
    16ea:	fe 01       	movw	r30, r28
    16ec:	e1 58       	subi	r30, 0x81	; 129
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	85 30       	cpi	r24, 0x05	; 5
    16f4:	09 f0       	breq	.+2      	; 0x16f8 <main+0xb6a>
    16f6:	82 c0       	rjmp	.+260    	; 0x17fc <main+0xc6e>
					{
						Light_button_count = 0;
    16f8:	fe 01       	movw	r30, r28
    16fa:	e1 58       	subi	r30, 0x81	; 129
    16fc:	ff 4f       	sbci	r31, 0xFF	; 255
    16fe:	10 82       	st	Z, r1
						LCD_moveCursor(1,13);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	6d e0       	ldi	r22, 0x0D	; 13
    1704:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
						LCD_displayString("OFF");
    1708:	84 ea       	ldi	r24, 0xA4	; 164
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
						GPIO_writePort(PORTB_ID,0XFF);
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	6f ef       	ldi	r22, 0xFF	; 255
    1714:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <GPIO_writePort>
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	aa ef       	ldi	r26, 0xFA	; 250
    171e:	b3 e4       	ldi	r27, 0x43	; 67
    1720:	8b 87       	std	Y+11, r24	; 0x0b
    1722:	9c 87       	std	Y+12, r25	; 0x0c
    1724:	ad 87       	std	Y+13, r26	; 0x0d
    1726:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	6b 85       	ldd	r22, Y+11	; 0x0b
    172a:	7c 85       	ldd	r23, Y+12	; 0x0c
    172c:	8d 85       	ldd	r24, Y+13	; 0x0d
    172e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a e7       	ldi	r20, 0x7A	; 122
    1736:	55 e4       	ldi	r21, 0x45	; 69
    1738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8f 83       	std	Y+7, r24	; 0x07
    1742:	98 87       	std	Y+8, r25	; 0x08
    1744:	a9 87       	std	Y+9, r26	; 0x09
    1746:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	2c f4       	brge	.+10     	; 0x176a <main+0xbdc>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <main+0xc5a>
	else if (__tmp > 65535)
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	4c f5       	brge	.+82     	; 0x17d4 <main+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	6b 85       	ldd	r22, Y+11	; 0x0b
    1784:	7c 85       	ldd	r23, Y+12	; 0x0c
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <main+0xc3c>
    17ac:	80 e9       	ldi	r24, 0x90	; 144
    17ae:	91 e0       	ldi	r25, 0x01	; 1
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <main+0xc2a>
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <main+0xc1e>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <main+0xc6e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <main+0xc66>
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
					else
					{
						/* Do No Thing*/
					}

					while(GPIO_readPin(PORTD_ID,PIN3_ID) == 0);
    17fc:	83 e0       	ldi	r24, 0x03	; 3
    17fe:	63 e0       	ldi	r22, 0x03	; 3
    1800:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <GPIO_readPin>
    1804:	88 23       	and	r24, r24
    1806:	d1 f3       	breq	.-12     	; 0x17fc <main+0xc6e>
	{
		/*This variable always receive from the 8051*/
		received_byte = UART_recieveByte();

		/* if receiver from 8051 char 'S' Means start */
		while(received_byte =='S')
    1808:	fe 01       	movw	r30, r28
    180a:	ef 57       	subi	r30, 0x7F	; 127
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	83 35       	cpi	r24, 0x53	; 83
    1812:	09 f4       	brne	.+2      	; 0x1816 <main+0xc88>
    1814:	13 ca       	rjmp	.-3034   	; 0xc3c <main+0xae>
				}
			}

		}

		Lcd_HomeScreen();
    1816:	0e 94 b2 05 	call	0xb64	; 0xb64 <Lcd_HomeScreen>
    181a:	09 ca       	rjmp	.-3054   	; 0xc2e <main+0xa0>

0000181c <Dc_Motor_Init>:
#include "dc_motor.h"
#include "std_types.h"
#include "gpio.h"

void Dc_Motor_Init(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTC_ID,PIN0_ID,PIN_OUTPUT);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN1_ID,PIN_OUTPUT);
    182e:	82 e0       	ldi	r24, 0x02	; 2
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	41 e0       	ldi	r20, 0x01	; 1
    1834:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID,PIN2_ID,PIN_OUTPUT);
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	62 e0       	ldi	r22, 0x02	; 2
    183c:	41 e0       	ldi	r20, 0x01	; 1
    183e:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	61 e0       	ldi	r22, 0x01	; 1
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_LOW);
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	62 e0       	ldi	r22, 0x02	; 2
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
}
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <Dc_Motor_Rotate>:

void Dc_Motor_Rotate(uint8 direction)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <Dc_Motor_Rotate+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTC_ID,PIN2_ID,LOGIC_HIGH);
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	62 e0       	ldi	r22, 0x02	; 2
    1878:	41 e0       	ldi	r20, 0x01	; 1
    187a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>

	switch(direction)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3b 83       	std	Y+3, r19	; 0x03
    1886:	2a 83       	std	Y+2, r18	; 0x02
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	a1 f0       	breq	.+40     	; 0x18ba <Dc_Motor_Rotate+0x54>
    1892:	2a 81       	ldd	r18, Y+2	; 0x02
    1894:	3b 81       	ldd	r19, Y+3	; 0x03
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	d1 f0       	breq	.+52     	; 0x18d0 <Dc_Motor_Rotate+0x6a>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	09 f5       	brne	.+66     	; 0x18e6 <Dc_Motor_Rotate+0x80>
	{

	case ROTATE_LEFT:
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_HIGH);
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    18b8:	20 c0       	rjmp	.+64     	; 0x18fa <Dc_Motor_Rotate+0x94>
		break;

	case ROTATE_RIGHT:
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_HIGH);
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	40 e0       	ldi	r20, 0x00	; 0
    18ca:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    18ce:	15 c0       	rjmp	.+42     	; 0x18fa <Dc_Motor_Rotate+0x94>
		break;
	case ROTATE_STOP:
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    18e4:	0a c0       	rjmp	.+20     	; 0x18fa <Dc_Motor_Rotate+0x94>
		break;

	default:
		GPIO_writePin(PORTC_ID,PIN0_ID,LOGIC_LOW);
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
		GPIO_writePin(PORTC_ID,PIN1_ID,LOGIC_LOW);
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	40 e0       	ldi	r20, 0x00	; 0
    18f6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
		break;
	}
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	00 d0       	rcall	.+0      	; 0x190c <GPIO_setupPinDirection+0x6>
    190c:	00 d0       	rcall	.+0      	; 0x190e <GPIO_setupPinDirection+0x8>
    190e:	0f 92       	push	r0
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	6a 83       	std	Y+2, r22	; 0x02
    1918:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	88 30       	cpi	r24, 0x08	; 8
    191e:	08 f0       	brcs	.+2      	; 0x1922 <GPIO_setupPinDirection+0x1c>
    1920:	d5 c0       	rjmp	.+426    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	84 30       	cpi	r24, 0x04	; 4
    1926:	08 f0       	brcs	.+2      	; 0x192a <GPIO_setupPinDirection+0x24>
    1928:	d1 c0       	rjmp	.+418    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	3d 83       	std	Y+5, r19	; 0x05
    1932:	2c 83       	std	Y+4, r18	; 0x04
    1934:	8c 81       	ldd	r24, Y+4	; 0x04
    1936:	9d 81       	ldd	r25, Y+5	; 0x05
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	91 05       	cpc	r25, r1
    193c:	09 f4       	brne	.+2      	; 0x1940 <GPIO_setupPinDirection+0x3a>
    193e:	43 c0       	rjmp	.+134    	; 0x19c6 <GPIO_setupPinDirection+0xc0>
    1940:	2c 81       	ldd	r18, Y+4	; 0x04
    1942:	3d 81       	ldd	r19, Y+5	; 0x05
    1944:	22 30       	cpi	r18, 0x02	; 2
    1946:	31 05       	cpc	r19, r1
    1948:	2c f4       	brge	.+10     	; 0x1954 <GPIO_setupPinDirection+0x4e>
    194a:	8c 81       	ldd	r24, Y+4	; 0x04
    194c:	9d 81       	ldd	r25, Y+5	; 0x05
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	71 f0       	breq	.+28     	; 0x196e <GPIO_setupPinDirection+0x68>
    1952:	bc c0       	rjmp	.+376    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
    1954:	2c 81       	ldd	r18, Y+4	; 0x04
    1956:	3d 81       	ldd	r19, Y+5	; 0x05
    1958:	22 30       	cpi	r18, 0x02	; 2
    195a:	31 05       	cpc	r19, r1
    195c:	09 f4       	brne	.+2      	; 0x1960 <GPIO_setupPinDirection+0x5a>
    195e:	5f c0       	rjmp	.+190    	; 0x1a1e <GPIO_setupPinDirection+0x118>
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	91 05       	cpc	r25, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <GPIO_setupPinDirection+0x66>
    196a:	85 c0       	rjmp	.+266    	; 0x1a76 <GPIO_setupPinDirection+0x170>
    196c:	af c0       	rjmp	.+350    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	a1 f4       	brne	.+40     	; 0x199c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1974:	aa e3       	ldi	r26, 0x3A	; 58
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	ea e3       	ldi	r30, 0x3A	; 58
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_setupPinDirection+0x8c>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_setupPinDirection+0x88>
    1996:	84 2b       	or	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	98 c0       	rjmp	.+304    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    199c:	aa e3       	ldi	r26, 0x3A	; 58
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	ea e3       	ldi	r30, 0x3A	; 58
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_setupPinDirection+0xb4>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_setupPinDirection+0xb0>
    19be:	80 95       	com	r24
    19c0:	84 23       	and	r24, r20
    19c2:	8c 93       	st	X, r24
    19c4:	83 c0       	rjmp	.+262    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	a1 f4       	brne	.+40     	; 0x19f4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    19cc:	a7 e3       	ldi	r26, 0x37	; 55
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e7 e3       	ldi	r30, 0x37	; 55
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_setupPinDirection+0xe4>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_setupPinDirection+0xe0>
    19ee:	84 2b       	or	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	6c c0       	rjmp	.+216    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    19f4:	a7 e3       	ldi	r26, 0x37	; 55
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e7 e3       	ldi	r30, 0x37	; 55
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <GPIO_setupPinDirection+0x10c>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <GPIO_setupPinDirection+0x108>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	57 c0       	rjmp	.+174    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	a1 f4       	brne	.+40     	; 0x1a4c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1a24:	a4 e3       	ldi	r26, 0x34	; 52
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e4 e3       	ldi	r30, 0x34	; 52
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_setupPinDirection+0x13c>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_setupPinDirection+0x138>
    1a46:	84 2b       	or	r24, r20
    1a48:	8c 93       	st	X, r24
    1a4a:	40 c0       	rjmp	.+128    	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a4c:	a4 e3       	ldi	r26, 0x34	; 52
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e4 e3       	ldi	r30, 0x34	; 52
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	48 2f       	mov	r20, r24
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 2e       	mov	r0, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <GPIO_setupPinDirection+0x164>
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	0a 94       	dec	r0
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <GPIO_setupPinDirection+0x160>
    1a6e:	80 95       	com	r24
    1a70:	84 23       	and	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	2b c0       	rjmp	.+86     	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	a1 f4       	brne	.+40     	; 0x1aa4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a7c:	a1 e3       	ldi	r26, 0x31	; 49
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e1 e3       	ldi	r30, 0x31	; 49
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	48 2f       	mov	r20, r24
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 2e       	mov	r0, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_setupPinDirection+0x194>
    1a96:	88 0f       	add	r24, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	0a 94       	dec	r0
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_setupPinDirection+0x190>
    1a9e:	84 2b       	or	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1aa4:	a1 e3       	ldi	r26, 0x31	; 49
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e1 e3       	ldi	r30, 0x31	; 49
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <GPIO_setupPinDirection+0x1bc>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <GPIO_setupPinDirection+0x1b8>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <GPIO_writePin+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPIO_writePin+0x8>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
    1aee:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	88 30       	cpi	r24, 0x08	; 8
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <GPIO_writePin+0x1c>
    1af6:	d5 c0       	rjmp	.+426    	; 0x1ca2 <GPIO_writePin+0x1c6>
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	84 30       	cpi	r24, 0x04	; 4
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <GPIO_writePin+0x24>
    1afe:	d1 c0       	rjmp	.+418    	; 0x1ca2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1b00:	89 81       	ldd	r24, Y+1	; 0x01
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	3d 83       	std	Y+5, r19	; 0x05
    1b08:	2c 83       	std	Y+4, r18	; 0x04
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	91 05       	cpc	r25, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <GPIO_writePin+0x3a>
    1b14:	43 c0       	rjmp	.+134    	; 0x1b9c <GPIO_writePin+0xc0>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <GPIO_writePin+0x4e>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <GPIO_writePin+0x68>
    1b28:	bc c0       	rjmp	.+376    	; 0x1ca2 <GPIO_writePin+0x1c6>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <GPIO_writePin+0x5a>
    1b34:	5f c0       	rjmp	.+190    	; 0x1bf4 <GPIO_writePin+0x118>
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <GPIO_writePin+0x66>
    1b40:	85 c0       	rjmp	.+266    	; 0x1c4c <GPIO_writePin+0x170>
    1b42:	af c0       	rjmp	.+350    	; 0x1ca2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	a1 f4       	brne	.+40     	; 0x1b72 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b4a:	ab e3       	ldi	r26, 0x3B	; 59
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	eb e3       	ldi	r30, 0x3B	; 59
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_writePin+0x8c>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_writePin+0x88>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	98 c0       	rjmp	.+304    	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b72:	ab e3       	ldi	r26, 0x3B	; 59
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	eb e3       	ldi	r30, 0x3B	; 59
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_writePin+0xb4>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_writePin+0xb0>
    1b94:	80 95       	com	r24
    1b96:	84 23       	and	r24, r20
    1b98:	8c 93       	st	X, r24
    1b9a:	83 c0       	rjmp	.+262    	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	a1 f4       	brne	.+40     	; 0x1bca <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ba2:	a8 e3       	ldi	r26, 0x38	; 56
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e8 e3       	ldi	r30, 0x38	; 56
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	48 2f       	mov	r20, r24
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <GPIO_writePin+0xe4>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <GPIO_writePin+0xe0>
    1bc4:	84 2b       	or	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	6c c0       	rjmp	.+216    	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1bca:	a8 e3       	ldi	r26, 0x38	; 56
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e8 e3       	ldi	r30, 0x38	; 56
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <GPIO_writePin+0x10c>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <GPIO_writePin+0x108>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	57 c0       	rjmp	.+174    	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	a1 f4       	brne	.+40     	; 0x1c22 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1bfa:	a5 e3       	ldi	r26, 0x35	; 53
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e5 e3       	ldi	r30, 0x35	; 53
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	48 2f       	mov	r20, r24
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 2e       	mov	r0, r18
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <GPIO_writePin+0x13c>
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	0a 94       	dec	r0
    1c1a:	e2 f7       	brpl	.-8      	; 0x1c14 <GPIO_writePin+0x138>
    1c1c:	84 2b       	or	r24, r20
    1c1e:	8c 93       	st	X, r24
    1c20:	40 c0       	rjmp	.+128    	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1c22:	a5 e3       	ldi	r26, 0x35	; 53
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e3       	ldi	r30, 0x35	; 53
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <GPIO_writePin+0x164>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <GPIO_writePin+0x160>
    1c44:	80 95       	com	r24
    1c46:	84 23       	and	r24, r20
    1c48:	8c 93       	st	X, r24
    1c4a:	2b c0       	rjmp	.+86     	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	a1 f4       	brne	.+40     	; 0x1c7a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c52:	a2 e3       	ldi	r26, 0x32	; 50
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e2 e3       	ldi	r30, 0x32	; 50
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	48 2f       	mov	r20, r24
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	02 2e       	mov	r0, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <GPIO_writePin+0x194>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	0a 94       	dec	r0
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <GPIO_writePin+0x190>
    1c74:	84 2b       	or	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c7a:	a2 e3       	ldi	r26, 0x32	; 50
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e2 e3       	ldi	r30, 0x32	; 50
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	48 2f       	mov	r20, r24
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	02 2e       	mov	r0, r18
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <GPIO_writePin+0x1bc>
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	0a 94       	dec	r0
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <GPIO_writePin+0x1b8>
    1c9c:	80 95       	com	r24
    1c9e:	84 23       	and	r24, r20
    1ca0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <GPIO_readPin+0x6>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <GPIO_readPin+0x8>
    1cba:	0f 92       	push	r0
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	8a 83       	std	Y+2, r24	; 0x02
    1cc2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1cc4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <GPIO_readPin+0x1c>
    1ccc:	84 c0       	rjmp	.+264    	; 0x1dd6 <GPIO_readPin+0x124>
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	84 30       	cpi	r24, 0x04	; 4
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <GPIO_readPin+0x24>
    1cd4:	80 c0       	rjmp	.+256    	; 0x1dd6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3d 83       	std	Y+5, r19	; 0x05
    1cde:	2c 83       	std	Y+4, r18	; 0x04
    1ce0:	4c 81       	ldd	r20, Y+4	; 0x04
    1ce2:	5d 81       	ldd	r21, Y+5	; 0x05
    1ce4:	41 30       	cpi	r20, 0x01	; 1
    1ce6:	51 05       	cpc	r21, r1
    1ce8:	79 f1       	breq	.+94     	; 0x1d48 <GPIO_readPin+0x96>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	9d 81       	ldd	r25, Y+5	; 0x05
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	34 f4       	brge	.+12     	; 0x1d00 <GPIO_readPin+0x4e>
    1cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf8:	21 15       	cp	r18, r1
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	69 f0       	breq	.+26     	; 0x1d18 <GPIO_readPin+0x66>
    1cfe:	6b c0       	rjmp	.+214    	; 0x1dd6 <GPIO_readPin+0x124>
    1d00:	4c 81       	ldd	r20, Y+4	; 0x04
    1d02:	5d 81       	ldd	r21, Y+5	; 0x05
    1d04:	42 30       	cpi	r20, 0x02	; 2
    1d06:	51 05       	cpc	r21, r1
    1d08:	b9 f1       	breq	.+110    	; 0x1d78 <GPIO_readPin+0xc6>
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	83 30       	cpi	r24, 0x03	; 3
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <GPIO_readPin+0x64>
    1d14:	49 c0       	rjmp	.+146    	; 0x1da8 <GPIO_readPin+0xf6>
    1d16:	5f c0       	rjmp	.+190    	; 0x1dd6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1d18:	e9 e3       	ldi	r30, 0x39	; 57
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	88 2f       	mov	r24, r24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a9 01       	movw	r20, r18
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <GPIO_readPin+0x7e>
    1d2c:	55 95       	asr	r21
    1d2e:	47 95       	ror	r20
    1d30:	8a 95       	dec	r24
    1d32:	e2 f7       	brpl	.-8      	; 0x1d2c <GPIO_readPin+0x7a>
    1d34:	ca 01       	movw	r24, r20
    1d36:	81 70       	andi	r24, 0x01	; 1
    1d38:	90 70       	andi	r25, 0x00	; 0
    1d3a:	88 23       	and	r24, r24
    1d3c:	19 f0       	breq	.+6      	; 0x1d44 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	49 c0       	rjmp	.+146    	; 0x1dd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d44:	19 82       	std	Y+1, r1	; 0x01
    1d46:	47 c0       	rjmp	.+142    	; 0x1dd6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d48:	e6 e3       	ldi	r30, 0x36	; 54
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a9 01       	movw	r20, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <GPIO_readPin+0xae>
    1d5c:	55 95       	asr	r21
    1d5e:	47 95       	ror	r20
    1d60:	8a 95       	dec	r24
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <GPIO_readPin+0xaa>
    1d64:	ca 01       	movw	r24, r20
    1d66:	81 70       	andi	r24, 0x01	; 1
    1d68:	90 70       	andi	r25, 0x00	; 0
    1d6a:	88 23       	and	r24, r24
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	31 c0       	rjmp	.+98     	; 0x1dd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	2f c0       	rjmp	.+94     	; 0x1dd6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d78:	e3 e3       	ldi	r30, 0x33	; 51
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_readPin+0xde>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_readPin+0xda>
    1d94:	ca 01       	movw	r24, r20
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	88 23       	and	r24, r24
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	19 c0       	rjmp	.+50     	; 0x1dd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1da4:	19 82       	std	Y+1, r1	; 0x01
    1da6:	17 c0       	rjmp	.+46     	; 0x1dd6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1da8:	e0 e3       	ldi	r30, 0x30	; 48
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a9 01       	movw	r20, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_readPin+0x10e>
    1dbc:	55 95       	asr	r21
    1dbe:	47 95       	ror	r20
    1dc0:	8a 95       	dec	r24
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_readPin+0x10a>
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	81 70       	andi	r24, 0x01	; 1
    1dc8:	90 70       	andi	r25, 0x00	; 0
    1dca:	88 23       	and	r24, r24
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	01 c0       	rjmp	.+2      	; 0x1dd6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1dd4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <GPIO_setupPortDirection+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <GPIO_setupPortDirection+0x8>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	90 f5       	brcc	.+100    	; 0x1e62 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	3c 83       	std	Y+4, r19	; 0x04
    1e06:	2b 83       	std	Y+3, r18	; 0x03
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	91 05       	cpc	r25, r1
    1e10:	d1 f0       	breq	.+52     	; 0x1e46 <GPIO_setupPortDirection+0x5e>
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	3c 81       	ldd	r19, Y+4	; 0x04
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 05       	cpc	r19, r1
    1e1a:	2c f4       	brge	.+10     	; 0x1e26 <GPIO_setupPortDirection+0x3e>
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	61 f0       	breq	.+24     	; 0x1e3c <GPIO_setupPortDirection+0x54>
    1e24:	1e c0       	rjmp	.+60     	; 0x1e62 <GPIO_setupPortDirection+0x7a>
    1e26:	2b 81       	ldd	r18, Y+3	; 0x03
    1e28:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	81 f0       	breq	.+32     	; 0x1e50 <GPIO_setupPortDirection+0x68>
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	83 30       	cpi	r24, 0x03	; 3
    1e36:	91 05       	cpc	r25, r1
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <GPIO_setupPortDirection+0x72>
    1e3a:	13 c0       	rjmp	.+38     	; 0x1e62 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1e3c:	ea e3       	ldi	r30, 0x3A	; 58
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	80 83       	st	Z, r24
    1e44:	0e c0       	rjmp	.+28     	; 0x1e62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e46:	e7 e3       	ldi	r30, 0x37	; 55
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	80 83       	st	Z, r24
    1e4e:	09 c0       	rjmp	.+18     	; 0x1e62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e50:	e4 e3       	ldi	r30, 0x34	; 52
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	8a 81       	ldd	r24, Y+2	; 0x02
    1e56:	80 83       	st	Z, r24
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e5a:	e1 e3       	ldi	r30, 0x31	; 49
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <GPIO_writePort+0x6>
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <GPIO_writePort+0x8>
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	89 83       	std	Y+1, r24	; 0x01
    1e7e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	90 f5       	brcc	.+100    	; 0x1eea <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	3c 83       	std	Y+4, r19	; 0x04
    1e8e:	2b 83       	std	Y+3, r18	; 0x03
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	91 05       	cpc	r25, r1
    1e98:	d1 f0       	breq	.+52     	; 0x1ece <GPIO_writePort+0x5e>
    1e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <GPIO_writePort+0x3e>
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	61 f0       	breq	.+24     	; 0x1ec4 <GPIO_writePort+0x54>
    1eac:	1e c0       	rjmp	.+60     	; 0x1eea <GPIO_writePort+0x7a>
    1eae:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb2:	22 30       	cpi	r18, 0x02	; 2
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	81 f0       	breq	.+32     	; 0x1ed8 <GPIO_writePort+0x68>
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	83 30       	cpi	r24, 0x03	; 3
    1ebe:	91 05       	cpc	r25, r1
    1ec0:	81 f0       	breq	.+32     	; 0x1ee2 <GPIO_writePort+0x72>
    1ec2:	13 c0       	rjmp	.+38     	; 0x1eea <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ec4:	eb e3       	ldi	r30, 0x3B	; 59
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 83       	st	Z, r24
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ece:	e8 e3       	ldi	r30, 0x38	; 56
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	80 83       	st	Z, r24
    1ed6:	09 c0       	rjmp	.+18     	; 0x1eea <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ed8:	e5 e3       	ldi	r30, 0x35	; 53
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	80 83       	st	Z, r24
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1ee2:	e2 e3       	ldi	r30, 0x32	; 50
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <GPIO_readPort+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <GPIO_readPort+0x8>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1f06:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	84 30       	cpi	r24, 0x04	; 4
    1f0c:	90 f5       	brcc	.+100    	; 0x1f72 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	d1 f0       	breq	.+52     	; 0x1f56 <GPIO_readPort+0x5e>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <GPIO_readPort+0x3e>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <GPIO_readPort+0x54>
    1f34:	1e c0       	rjmp	.+60     	; 0x1f72 <GPIO_readPort+0x7a>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <GPIO_readPort+0x68>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	81 f0       	breq	.+32     	; 0x1f6a <GPIO_readPort+0x72>
    1f4a:	13 c0       	rjmp	.+38     	; 0x1f72 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f4c:	e9 e3       	ldi	r30, 0x39	; 57
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	0e c0       	rjmp	.+28     	; 0x1f72 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f56:	e6 e3       	ldi	r30, 0x36	; 54
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f60:	e3 e3       	ldi	r30, 0x33	; 51
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f6a:	e0 e3       	ldi	r30, 0x30	; 48
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	61 e0       	ldi	r22, 0x01	; 1
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	62 e0       	ldi	r22, 0x02	; 2
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 ea       	ldi	r26, 0xA0	; 160
    1fb0:	b1 e4       	ldi	r27, 0x41	; 65
    1fb2:	8b 87       	std	Y+11, r24	; 0x0b
    1fb4:	9c 87       	std	Y+12, r25	; 0x0c
    1fb6:	ad 87       	std	Y+13, r26	; 0x0d
    1fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a e7       	ldi	r20, 0x7A	; 122
    1fc8:	55 e4       	ldi	r21, 0x45	; 69
    1fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8f 83       	std	Y+7, r24	; 0x07
    1fd4:	98 87       	std	Y+8, r25	; 0x08
    1fd6:	a9 87       	std	Y+9, r26	; 0x09
    1fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <LCD_init+0x7a>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	4c f5       	brge	.+82     	; 0x2066 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	6b 85       	ldd	r22, Y+11	; 0x0b
    2016:	7c 85       	ldd	r23, Y+12	; 0x0c
    2018:	8d 85       	ldd	r24, Y+13	; 0x0d
    201a:	9e 85       	ldd	r25, Y+14	; 0x0e
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	0f c0       	rjmp	.+30     	; 0x205c <LCD_init+0xda>
    203e:	80 e9       	ldi	r24, 0x90	; 144
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_init+0xc8>
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <LCD_init+0xbc>
    2064:	14 c0       	rjmp	.+40     	; 0x208e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_init+0x104>
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	63 e0       	ldi	r22, 0x03	; 3
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	65 e0       	ldi	r22, 0x05	; 5
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	66 e0       	ldi	r22, 0x06	; 6
    20b0:	41 e0       	ldi	r20, 0x01	; 1
    20b2:	0e 94 83 0c 	call	0x1906	; 0x1906 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    20b6:	83 e3       	ldi	r24, 0x33	; 51
    20b8:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    20bc:	82 e3       	ldi	r24, 0x32	; 50
    20be:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    20c2:	88 e2       	ldi	r24, 0x28	; 40
    20c4:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    20c8:	8c e0       	ldi	r24, 0x0C	; 12
    20ca:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>
}
    20d4:	2e 96       	adiw	r28, 0x0e	; 14
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	c3 56       	subi	r28, 0x63	; 99
    20f4:	d0 40       	sbci	r29, 0x00	; 0
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	fe 01       	movw	r30, r28
    2102:	ed 59       	subi	r30, 0x9D	; 157
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2112:	fe 01       	movw	r30, r28
    2114:	e1 5a       	subi	r30, 0xA1	; 161
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	80 83       	st	Z, r24
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	a2 83       	std	Z+2, r26	; 0x02
    2126:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	8e 01       	movw	r16, r28
    212a:	05 5a       	subi	r16, 0xA5	; 165
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
    212e:	fe 01       	movw	r30, r28
    2130:	e1 5a       	subi	r30, 0xA1	; 161
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	55 e4       	ldi	r21, 0x45	; 69
    2144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	80 83       	st	Z, r24
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	a2 83       	std	Z+2, r26	; 0x02
    2154:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2156:	fe 01       	movw	r30, r28
    2158:	e5 5a       	subi	r30, 0xA5	; 165
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	60 81       	ld	r22, Z
    215e:	71 81       	ldd	r23, Z+1	; 0x01
    2160:	82 81       	ldd	r24, Z+2	; 0x02
    2162:	93 81       	ldd	r25, Z+3	; 0x03
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e8       	ldi	r20, 0x80	; 128
    216a:	5f e3       	ldi	r21, 0x3F	; 63
    216c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2170:	88 23       	and	r24, r24
    2172:	44 f4       	brge	.+16     	; 0x2184 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2174:	fe 01       	movw	r30, r28
    2176:	e7 5a       	subi	r30, 0xA7	; 167
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	64 c0       	rjmp	.+200    	; 0x224c <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2184:	fe 01       	movw	r30, r28
    2186:	e5 5a       	subi	r30, 0xA5	; 165
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	3f ef       	ldi	r19, 0xFF	; 255
    2196:	4f e7       	ldi	r20, 0x7F	; 127
    2198:	57 e4       	ldi	r21, 0x47	; 71
    219a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    219e:	18 16       	cp	r1, r24
    21a0:	0c f0       	brlt	.+2      	; 0x21a4 <LCD_sendCommand+0xbe>
    21a2:	43 c0       	rjmp	.+134    	; 0x222a <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	fe 01       	movw	r30, r28
    21a6:	e1 5a       	subi	r30, 0xA1	; 161
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	60 81       	ld	r22, Z
    21ac:	71 81       	ldd	r23, Z+1	; 0x01
    21ae:	82 81       	ldd	r24, Z+2	; 0x02
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e2       	ldi	r20, 0x20	; 32
    21b8:	51 e4       	ldi	r21, 0x41	; 65
    21ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8e 01       	movw	r16, r28
    21c4:	07 5a       	subi	r16, 0xA7	; 167
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	bc 01       	movw	r22, r24
    21ca:	cd 01       	movw	r24, r26
    21cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	f8 01       	movw	r30, r16
    21d6:	91 83       	std	Z+1, r25	; 0x01
    21d8:	80 83       	st	Z, r24
    21da:	1f c0       	rjmp	.+62     	; 0x221a <LCD_sendCommand+0x134>
    21dc:	fe 01       	movw	r30, r28
    21de:	e9 5a       	subi	r30, 0xA9	; 169
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 e9       	ldi	r24, 0x90	; 144
    21e4:	91 e0       	ldi	r25, 0x01	; 1
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
    21ea:	fe 01       	movw	r30, r28
    21ec:	e9 5a       	subi	r30, 0xA9	; 169
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 81       	ld	r24, Z
    21f2:	91 81       	ldd	r25, Z+1	; 0x01
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_sendCommand+0x10e>
    21f8:	fe 01       	movw	r30, r28
    21fa:	e9 5a       	subi	r30, 0xA9	; 169
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	91 83       	std	Z+1, r25	; 0x01
    2200:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	de 01       	movw	r26, r28
    2204:	a7 5a       	subi	r26, 0xA7	; 167
    2206:	bf 4f       	sbci	r27, 0xFF	; 255
    2208:	fe 01       	movw	r30, r28
    220a:	e7 5a       	subi	r30, 0xA7	; 167
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	9c 93       	st	X, r25
    2218:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221a:	fe 01       	movw	r30, r28
    221c:	e7 5a       	subi	r30, 0xA7	; 167
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	d1 f6       	brne	.-76     	; 0x21dc <LCD_sendCommand+0xf6>
    2228:	27 c0       	rjmp	.+78     	; 0x2278 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	8e 01       	movw	r16, r28
    222c:	07 5a       	subi	r16, 0xA7	; 167
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	fe 01       	movw	r30, r28
    2232:	e5 5a       	subi	r30, 0xA5	; 165
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	f8 01       	movw	r30, r16
    2248:	91 83       	std	Z+1, r25	; 0x01
    224a:	80 83       	st	Z, r24
    224c:	de 01       	movw	r26, r28
    224e:	ab 5a       	subi	r26, 0xAB	; 171
    2250:	bf 4f       	sbci	r27, 0xFF	; 255
    2252:	fe 01       	movw	r30, r28
    2254:	e7 5a       	subi	r30, 0xA7	; 167
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	8d 93       	st	X+, r24
    225e:	9c 93       	st	X, r25
    2260:	fe 01       	movw	r30, r28
    2262:	eb 5a       	subi	r30, 0xAB	; 171
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	91 81       	ldd	r25, Z+1	; 0x01
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_sendCommand+0x184>
    226e:	fe 01       	movw	r30, r28
    2270:	eb 5a       	subi	r30, 0xAB	; 171
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	62 e0       	ldi	r22, 0x02	; 2
    227c:	41 e0       	ldi	r20, 0x01	; 1
    227e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2282:	fe 01       	movw	r30, r28
    2284:	ef 5a       	subi	r30, 0xAF	; 175
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e8       	ldi	r26, 0x80	; 128
    228e:	bf e3       	ldi	r27, 0x3F	; 63
    2290:	80 83       	st	Z, r24
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	a2 83       	std	Z+2, r26	; 0x02
    2296:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	8e 01       	movw	r16, r28
    229a:	03 5b       	subi	r16, 0xB3	; 179
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	ef 5a       	subi	r30, 0xAF	; 175
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a e7       	ldi	r20, 0x7A	; 122
    22b2:	55 e4       	ldi	r21, 0x45	; 69
    22b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22c6:	fe 01       	movw	r30, r28
    22c8:	e3 5b       	subi	r30, 0xB3	; 179
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	60 81       	ld	r22, Z
    22ce:	71 81       	ldd	r23, Z+1	; 0x01
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	93 81       	ldd	r25, Z+3	; 0x03
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	44 f4       	brge	.+16     	; 0x22f4 <LCD_sendCommand+0x20e>
		__ticks = 1;
    22e4:	fe 01       	movw	r30, r28
    22e6:	e5 5b       	subi	r30, 0xB5	; 181
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	64 c0       	rjmp	.+200    	; 0x23bc <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    22f4:	fe 01       	movw	r30, r28
    22f6:	e3 5b       	subi	r30, 0xB3	; 179
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	0c f0       	brlt	.+2      	; 0x2314 <LCD_sendCommand+0x22e>
    2312:	43 c0       	rjmp	.+134    	; 0x239a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	fe 01       	movw	r30, r28
    2316:	ef 5a       	subi	r30, 0xAF	; 175
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8e 01       	movw	r16, r28
    2334:	05 5b       	subi	r16, 0xB5	; 181
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	f8 01       	movw	r30, r16
    2346:	91 83       	std	Z+1, r25	; 0x01
    2348:	80 83       	st	Z, r24
    234a:	1f c0       	rjmp	.+62     	; 0x238a <LCD_sendCommand+0x2a4>
    234c:	fe 01       	movw	r30, r28
    234e:	e7 5b       	subi	r30, 0xB7	; 183
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 e9       	ldi	r24, 0x90	; 144
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	fe 01       	movw	r30, r28
    235c:	e7 5b       	subi	r30, 0xB7	; 183
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_sendCommand+0x27e>
    2368:	fe 01       	movw	r30, r28
    236a:	e7 5b       	subi	r30, 0xB7	; 183
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	de 01       	movw	r26, r28
    2374:	a5 5b       	subi	r26, 0xB5	; 181
    2376:	bf 4f       	sbci	r27, 0xFF	; 255
    2378:	fe 01       	movw	r30, r28
    237a:	e5 5b       	subi	r30, 0xB5	; 181
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	11 96       	adiw	r26, 0x01	; 1
    2386:	9c 93       	st	X, r25
    2388:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	fe 01       	movw	r30, r28
    238c:	e5 5b       	subi	r30, 0xB5	; 181
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	d1 f6       	brne	.-76     	; 0x234c <LCD_sendCommand+0x266>
    2398:	27 c0       	rjmp	.+78     	; 0x23e8 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	8e 01       	movw	r16, r28
    239c:	05 5b       	subi	r16, 0xB5	; 181
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	e3 5b       	subi	r30, 0xB3	; 179
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	f8 01       	movw	r30, r16
    23b8:	91 83       	std	Z+1, r25	; 0x01
    23ba:	80 83       	st	Z, r24
    23bc:	de 01       	movw	r26, r28
    23be:	a9 5b       	subi	r26, 0xB9	; 185
    23c0:	bf 4f       	sbci	r27, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	e5 5b       	subi	r30, 0xB5	; 181
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	8d 93       	st	X+, r24
    23ce:	9c 93       	st	X, r25
    23d0:	fe 01       	movw	r30, r28
    23d2:	e9 5b       	subi	r30, 0xB9	; 185
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_sendCommand+0x2f4>
    23de:	fe 01       	movw	r30, r28
    23e0:	e9 5b       	subi	r30, 0xB9	; 185
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    23e8:	fe 01       	movw	r30, r28
    23ea:	ed 59       	subi	r30, 0x9D	; 157
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	88 2f       	mov	r24, r24
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	80 71       	andi	r24, 0x10	; 16
    23f6:	90 70       	andi	r25, 0x00	; 0
    23f8:	95 95       	asr	r25
    23fa:	87 95       	ror	r24
    23fc:	95 95       	asr	r25
    23fe:	87 95       	ror	r24
    2400:	95 95       	asr	r25
    2402:	87 95       	ror	r24
    2404:	95 95       	asr	r25
    2406:	87 95       	ror	r24
    2408:	98 2f       	mov	r25, r24
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	63 e0       	ldi	r22, 0x03	; 3
    240e:	49 2f       	mov	r20, r25
    2410:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2414:	fe 01       	movw	r30, r28
    2416:	ed 59       	subi	r30, 0x9D	; 157
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 81       	ld	r24, Z
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	80 72       	andi	r24, 0x20	; 32
    2422:	90 70       	andi	r25, 0x00	; 0
    2424:	95 95       	asr	r25
    2426:	87 95       	ror	r24
    2428:	95 95       	asr	r25
    242a:	87 95       	ror	r24
    242c:	95 95       	asr	r25
    242e:	87 95       	ror	r24
    2430:	95 95       	asr	r25
    2432:	87 95       	ror	r24
    2434:	95 95       	asr	r25
    2436:	87 95       	ror	r24
    2438:	98 2f       	mov	r25, r24
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	64 e0       	ldi	r22, 0x04	; 4
    243e:	49 2f       	mov	r20, r25
    2440:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2444:	fe 01       	movw	r30, r28
    2446:	ed 59       	subi	r30, 0x9D	; 157
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	80 74       	andi	r24, 0x40	; 64
    2452:	90 70       	andi	r25, 0x00	; 0
    2454:	08 2e       	mov	r0, r24
    2456:	89 2f       	mov	r24, r25
    2458:	00 0c       	add	r0, r0
    245a:	88 1f       	adc	r24, r24
    245c:	99 0b       	sbc	r25, r25
    245e:	00 0c       	add	r0, r0
    2460:	88 1f       	adc	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	98 2f       	mov	r25, r24
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	65 e0       	ldi	r22, 0x05	; 5
    246a:	49 2f       	mov	r20, r25
    246c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2470:	fe 01       	movw	r30, r28
    2472:	ed 59       	subi	r30, 0x9D	; 157
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	98 2f       	mov	r25, r24
    247a:	99 1f       	adc	r25, r25
    247c:	99 27       	eor	r25, r25
    247e:	99 1f       	adc	r25, r25
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	66 e0       	ldi	r22, 0x06	; 6
    2484:	49 2f       	mov	r20, r25
    2486:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    248a:	fe 01       	movw	r30, r28
    248c:	ed 5b       	subi	r30, 0xBD	; 189
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a0 e8       	ldi	r26, 0x80	; 128
    2496:	bf e3       	ldi	r27, 0x3F	; 63
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a0:	8e 01       	movw	r16, r28
    24a2:	01 5c       	subi	r16, 0xC1	; 193
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	ed 5b       	subi	r30, 0xBD	; 189
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a e7       	ldi	r20, 0x7A	; 122
    24ba:	55 e4       	ldi	r21, 0x45	; 69
    24bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	f8 01       	movw	r30, r16
    24c6:	80 83       	st	Z, r24
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	a2 83       	std	Z+2, r26	; 0x02
    24cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24ce:	fe 01       	movw	r30, r28
    24d0:	ff 96       	adiw	r30, 0x3f	; 63
    24d2:	60 81       	ld	r22, Z
    24d4:	71 81       	ldd	r23, Z+1	; 0x01
    24d6:	82 81       	ldd	r24, Z+2	; 0x02
    24d8:	93 81       	ldd	r25, Z+3	; 0x03
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <LCD_sendCommand+0x40e>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9e af       	std	Y+62, r25	; 0x3e
    24f0:	8d af       	std	Y+61, r24	; 0x3d
    24f2:	46 c0       	rjmp	.+140    	; 0x2580 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    24f4:	fe 01       	movw	r30, r28
    24f6:	ff 96       	adiw	r30, 0x3f	; 63
    24f8:	60 81       	ld	r22, Z
    24fa:	71 81       	ldd	r23, Z+1	; 0x01
    24fc:	82 81       	ldd	r24, Z+2	; 0x02
    24fe:	93 81       	ldd	r25, Z+3	; 0x03
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	64 f5       	brge	.+88     	; 0x2568 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	fe 01       	movw	r30, r28
    2512:	ed 5b       	subi	r30, 0xBD	; 189
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	60 81       	ld	r22, Z
    2518:	71 81       	ldd	r23, Z+1	; 0x01
    251a:	82 81       	ldd	r24, Z+2	; 0x02
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e af       	std	Y+62, r25	; 0x3e
    253c:	8d af       	std	Y+61, r24	; 0x3d
    253e:	0f c0       	rjmp	.+30     	; 0x255e <LCD_sendCommand+0x478>
    2540:	80 e9       	ldi	r24, 0x90	; 144
    2542:	91 e0       	ldi	r25, 0x01	; 1
    2544:	9c af       	std	Y+60, r25	; 0x3c
    2546:	8b af       	std	Y+59, r24	; 0x3b
    2548:	8b ad       	ldd	r24, Y+59	; 0x3b
    254a:	9c ad       	ldd	r25, Y+60	; 0x3c
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_sendCommand+0x466>
    2550:	9c af       	std	Y+60, r25	; 0x3c
    2552:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d ad       	ldd	r24, Y+61	; 0x3d
    2556:	9e ad       	ldd	r25, Y+62	; 0x3e
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e af       	std	Y+62, r25	; 0x3e
    255c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2560:	9e ad       	ldd	r25, Y+62	; 0x3e
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <LCD_sendCommand+0x45a>
    2566:	16 c0       	rjmp	.+44     	; 0x2594 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	fe 01       	movw	r30, r28
    256a:	ff 96       	adiw	r30, 0x3f	; 63
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	93 81       	ldd	r25, Z+3	; 0x03
    2574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e af       	std	Y+62, r25	; 0x3e
    257e:	8d af       	std	Y+61, r24	; 0x3d
    2580:	8d ad       	ldd	r24, Y+61	; 0x3d
    2582:	9e ad       	ldd	r25, Y+62	; 0x3e
    2584:	9a af       	std	Y+58, r25	; 0x3a
    2586:	89 af       	std	Y+57, r24	; 0x39
    2588:	89 ad       	ldd	r24, Y+57	; 0x39
    258a:	9a ad       	ldd	r25, Y+58	; 0x3a
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_sendCommand+0x4a6>
    2590:	9a af       	std	Y+58, r25	; 0x3a
    2592:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	62 e0       	ldi	r22, 0x02	; 2
    2598:	40 e0       	ldi	r20, 0x00	; 0
    259a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e8       	ldi	r26, 0x80	; 128
    25a4:	bf e3       	ldi	r27, 0x3F	; 63
    25a6:	8d ab       	std	Y+53, r24	; 0x35
    25a8:	9e ab       	std	Y+54, r25	; 0x36
    25aa:	af ab       	std	Y+55, r26	; 0x37
    25ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	6d a9       	ldd	r22, Y+53	; 0x35
    25b0:	7e a9       	ldd	r23, Y+54	; 0x36
    25b2:	8f a9       	ldd	r24, Y+55	; 0x37
    25b4:	98 ad       	ldd	r25, Y+56	; 0x38
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a e7       	ldi	r20, 0x7A	; 122
    25bc:	55 e4       	ldi	r21, 0x45	; 69
    25be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	89 ab       	std	Y+49, r24	; 0x31
    25c8:	9a ab       	std	Y+50, r25	; 0x32
    25ca:	ab ab       	std	Y+51, r26	; 0x33
    25cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25ce:	69 a9       	ldd	r22, Y+49	; 0x31
    25d0:	7a a9       	ldd	r23, Y+50	; 0x32
    25d2:	8b a9       	ldd	r24, Y+51	; 0x33
    25d4:	9c a9       	ldd	r25, Y+52	; 0x34
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e8       	ldi	r20, 0x80	; 128
    25dc:	5f e3       	ldi	r21, 0x3F	; 63
    25de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25e2:	88 23       	and	r24, r24
    25e4:	2c f4       	brge	.+10     	; 0x25f0 <LCD_sendCommand+0x50a>
		__ticks = 1;
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	98 ab       	std	Y+48, r25	; 0x30
    25ec:	8f a7       	std	Y+47, r24	; 0x2f
    25ee:	3f c0       	rjmp	.+126    	; 0x266e <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    25f0:	69 a9       	ldd	r22, Y+49	; 0x31
    25f2:	7a a9       	ldd	r23, Y+50	; 0x32
    25f4:	8b a9       	ldd	r24, Y+51	; 0x33
    25f6:	9c a9       	ldd	r25, Y+52	; 0x34
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	3f ef       	ldi	r19, 0xFF	; 255
    25fc:	4f e7       	ldi	r20, 0x7F	; 127
    25fe:	57 e4       	ldi	r21, 0x47	; 71
    2600:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2604:	18 16       	cp	r1, r24
    2606:	4c f5       	brge	.+82     	; 0x265a <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2608:	6d a9       	ldd	r22, Y+53	; 0x35
    260a:	7e a9       	ldd	r23, Y+54	; 0x36
    260c:	8f a9       	ldd	r24, Y+55	; 0x37
    260e:	98 ad       	ldd	r25, Y+56	; 0x38
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e2       	ldi	r20, 0x20	; 32
    2616:	51 e4       	ldi	r21, 0x41	; 65
    2618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	98 ab       	std	Y+48, r25	; 0x30
    262e:	8f a7       	std	Y+47, r24	; 0x2f
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <LCD_sendCommand+0x56a>
    2632:	80 e9       	ldi	r24, 0x90	; 144
    2634:	91 e0       	ldi	r25, 0x01	; 1
    2636:	9e a7       	std	Y+46, r25	; 0x2e
    2638:	8d a7       	std	Y+45, r24	; 0x2d
    263a:	8d a5       	ldd	r24, Y+45	; 0x2d
    263c:	9e a5       	ldd	r25, Y+46	; 0x2e
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <LCD_sendCommand+0x558>
    2642:	9e a7       	std	Y+46, r25	; 0x2e
    2644:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2646:	8f a5       	ldd	r24, Y+47	; 0x2f
    2648:	98 a9       	ldd	r25, Y+48	; 0x30
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	98 ab       	std	Y+48, r25	; 0x30
    264e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2650:	8f a5       	ldd	r24, Y+47	; 0x2f
    2652:	98 a9       	ldd	r25, Y+48	; 0x30
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	69 f7       	brne	.-38     	; 0x2632 <LCD_sendCommand+0x54c>
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	69 a9       	ldd	r22, Y+49	; 0x31
    265c:	7a a9       	ldd	r23, Y+50	; 0x32
    265e:	8b a9       	ldd	r24, Y+51	; 0x33
    2660:	9c a9       	ldd	r25, Y+52	; 0x34
    2662:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	98 ab       	std	Y+48, r25	; 0x30
    266c:	8f a7       	std	Y+47, r24	; 0x2f
    266e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2670:	98 a9       	ldd	r25, Y+48	; 0x30
    2672:	9c a7       	std	Y+44, r25	; 0x2c
    2674:	8b a7       	std	Y+43, r24	; 0x2b
    2676:	8b a5       	ldd	r24, Y+43	; 0x2b
    2678:	9c a5       	ldd	r25, Y+44	; 0x2c
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_sendCommand+0x594>
    267e:	9c a7       	std	Y+44, r25	; 0x2c
    2680:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	41 e0       	ldi	r20, 0x01	; 1
    2688:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e8       	ldi	r26, 0x80	; 128
    2692:	bf e3       	ldi	r27, 0x3F	; 63
    2694:	8f a3       	std	Y+39, r24	; 0x27
    2696:	98 a7       	std	Y+40, r25	; 0x28
    2698:	a9 a7       	std	Y+41, r26	; 0x29
    269a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	6f a1       	ldd	r22, Y+39	; 0x27
    269e:	78 a5       	ldd	r23, Y+40	; 0x28
    26a0:	89 a5       	ldd	r24, Y+41	; 0x29
    26a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	8b a3       	std	Y+35, r24	; 0x23
    26b6:	9c a3       	std	Y+36, r25	; 0x24
    26b8:	ad a3       	std	Y+37, r26	; 0x25
    26ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26bc:	6b a1       	ldd	r22, Y+35	; 0x23
    26be:	7c a1       	ldd	r23, Y+36	; 0x24
    26c0:	8d a1       	ldd	r24, Y+37	; 0x25
    26c2:	9e a1       	ldd	r25, Y+38	; 0x26
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <LCD_sendCommand+0x5f8>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9a a3       	std	Y+34, r25	; 0x22
    26da:	89 a3       	std	Y+33, r24	; 0x21
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    26de:	6b a1       	ldd	r22, Y+35	; 0x23
    26e0:	7c a1       	ldd	r23, Y+36	; 0x24
    26e2:	8d a1       	ldd	r24, Y+37	; 0x25
    26e4:	9e a1       	ldd	r25, Y+38	; 0x26
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	6f a1       	ldd	r22, Y+39	; 0x27
    26f8:	78 a5       	ldd	r23, Y+40	; 0x28
    26fa:	89 a5       	ldd	r24, Y+41	; 0x29
    26fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9a a3       	std	Y+34, r25	; 0x22
    271c:	89 a3       	std	Y+33, r24	; 0x21
    271e:	0f c0       	rjmp	.+30     	; 0x273e <LCD_sendCommand+0x658>
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	98 a3       	std	Y+32, r25	; 0x20
    2726:	8f 8f       	std	Y+31, r24	; 0x1f
    2728:	8f 8d       	ldd	r24, Y+31	; 0x1f
    272a:	98 a1       	ldd	r25, Y+32	; 0x20
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <LCD_sendCommand+0x646>
    2730:	98 a3       	std	Y+32, r25	; 0x20
    2732:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	89 a1       	ldd	r24, Y+33	; 0x21
    2736:	9a a1       	ldd	r25, Y+34	; 0x22
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	9a a3       	std	Y+34, r25	; 0x22
    273c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	89 a1       	ldd	r24, Y+33	; 0x21
    2740:	9a a1       	ldd	r25, Y+34	; 0x22
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <LCD_sendCommand+0x63a>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	6b a1       	ldd	r22, Y+35	; 0x23
    274a:	7c a1       	ldd	r23, Y+36	; 0x24
    274c:	8d a1       	ldd	r24, Y+37	; 0x25
    274e:	9e a1       	ldd	r25, Y+38	; 0x26
    2750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	9a a3       	std	Y+34, r25	; 0x22
    275a:	89 a3       	std	Y+33, r24	; 0x21
    275c:	89 a1       	ldd	r24, Y+33	; 0x21
    275e:	9a a1       	ldd	r25, Y+34	; 0x22
    2760:	9e 8f       	std	Y+30, r25	; 0x1e
    2762:	8d 8f       	std	Y+29, r24	; 0x1d
    2764:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2766:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_sendCommand+0x682>
    276c:	9e 8f       	std	Y+30, r25	; 0x1e
    276e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2770:	fe 01       	movw	r30, r28
    2772:	ed 59       	subi	r30, 0x9D	; 157
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	98 2f       	mov	r25, r24
    277a:	91 70       	andi	r25, 0x01	; 1
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	63 e0       	ldi	r22, 0x03	; 3
    2780:	49 2f       	mov	r20, r25
    2782:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2786:	fe 01       	movw	r30, r28
    2788:	ed 59       	subi	r30, 0x9D	; 157
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	82 70       	andi	r24, 0x02	; 2
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	95 95       	asr	r25
    2798:	87 95       	ror	r24
    279a:	98 2f       	mov	r25, r24
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	64 e0       	ldi	r22, 0x04	; 4
    27a0:	49 2f       	mov	r20, r25
    27a2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    27a6:	fe 01       	movw	r30, r28
    27a8:	ed 59       	subi	r30, 0x9D	; 157
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	84 70       	andi	r24, 0x04	; 4
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	95 95       	asr	r25
    27b8:	87 95       	ror	r24
    27ba:	95 95       	asr	r25
    27bc:	87 95       	ror	r24
    27be:	98 2f       	mov	r25, r24
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	65 e0       	ldi	r22, 0x05	; 5
    27c4:	49 2f       	mov	r20, r25
    27c6:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    27ca:	fe 01       	movw	r30, r28
    27cc:	ed 59       	subi	r30, 0x9D	; 157
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	88 70       	andi	r24, 0x08	; 8
    27d8:	90 70       	andi	r25, 0x00	; 0
    27da:	95 95       	asr	r25
    27dc:	87 95       	ror	r24
    27de:	95 95       	asr	r25
    27e0:	87 95       	ror	r24
    27e2:	95 95       	asr	r25
    27e4:	87 95       	ror	r24
    27e6:	98 2f       	mov	r25, r24
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	66 e0       	ldi	r22, 0x06	; 6
    27ec:	49 2f       	mov	r20, r25
    27ee:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	89 8f       	std	Y+25, r24	; 0x19
    27fc:	9a 8f       	std	Y+26, r25	; 0x1a
    27fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2800:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	69 8d       	ldd	r22, Y+25	; 0x19
    2804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	55 e4       	ldi	r21, 0x45	; 69
    2812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8d 8b       	std	Y+21, r24	; 0x15
    281c:	9e 8b       	std	Y+22, r25	; 0x16
    281e:	af 8b       	std	Y+23, r26	; 0x17
    2820:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2822:	6d 89       	ldd	r22, Y+21	; 0x15
    2824:	7e 89       	ldd	r23, Y+22	; 0x16
    2826:	8f 89       	ldd	r24, Y+23	; 0x17
    2828:	98 8d       	ldd	r25, Y+24	; 0x18
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_sendCommand+0x75e>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9c 8b       	std	Y+20, r25	; 0x14
    2840:	8b 8b       	std	Y+19, r24	; 0x13
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	69 8d       	ldd	r22, Y+25	; 0x19
    285e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_sendCommand+0x7be>
    2886:	80 e9       	ldi	r24, 0x90	; 144
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	9a 8b       	std	Y+18, r25	; 0x12
    288c:	89 8b       	std	Y+17, r24	; 0x11
    288e:	89 89       	ldd	r24, Y+17	; 0x11
    2890:	9a 89       	ldd	r25, Y+18	; 0x12
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_sendCommand+0x7ac>
    2896:	9a 8b       	std	Y+18, r25	; 0x12
    2898:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8b 89       	ldd	r24, Y+19	; 0x13
    28a6:	9c 89       	ldd	r25, Y+20	; 0x14
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_sendCommand+0x7a0>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9c 8b       	std	Y+20, r25	; 0x14
    28c0:	8b 8b       	std	Y+19, r24	; 0x13
    28c2:	8b 89       	ldd	r24, Y+19	; 0x13
    28c4:	9c 89       	ldd	r25, Y+20	; 0x14
    28c6:	98 8b       	std	Y+16, r25	; 0x10
    28c8:	8f 87       	std	Y+15, r24	; 0x0f
    28ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    28cc:	98 89       	ldd	r25, Y+16	; 0x10
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_sendCommand+0x7e8>
    28d2:	98 8b       	std	Y+16, r25	; 0x10
    28d4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e8       	ldi	r26, 0x80	; 128
    28e6:	bf e3       	ldi	r27, 0x3F	; 63
    28e8:	8b 87       	std	Y+11, r24	; 0x0b
    28ea:	9c 87       	std	Y+12, r25	; 0x0c
    28ec:	ad 87       	std	Y+13, r26	; 0x0d
    28ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a e7       	ldi	r20, 0x7A	; 122
    28fe:	55 e4       	ldi	r21, 0x45	; 69
    2900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8f 83       	std	Y+7, r24	; 0x07
    290a:	98 87       	std	Y+8, r25	; 0x08
    290c:	a9 87       	std	Y+9, r26	; 0x09
    290e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	6b 85       	ldd	r22, Y+11	; 0x0b
    294c:	7c 85       	ldd	r23, Y+12	; 0x0c
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <LCD_sendCommand+0x8ac>
    2974:	80 e9       	ldi	r24, 0x90	; 144
    2976:	91 e0       	ldi	r25, 0x01	; 1
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_sendCommand+0x89a>
    2984:	9c 83       	std	Y+4, r25	; 0x04
    2986:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <LCD_sendCommand+0x88e>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_sendCommand+0x8d6>
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29c4:	cd 59       	subi	r28, 0x9D	; 157
    29c6:	df 4f       	sbci	r29, 0xFF	; 255
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	08 95       	ret

000029dc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	c3 56       	subi	r28, 0x63	; 99
    29ea:	d0 40       	sbci	r29, 0x00	; 0
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	fe 01       	movw	r30, r28
    29f8:	ed 59       	subi	r30, 0x9D	; 157
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	61 e0       	ldi	r22, 0x01	; 1
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e1 5a       	subi	r30, 0xA1	; 161
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	a0 e8       	ldi	r26, 0x80	; 128
    2a14:	bf e3       	ldi	r27, 0x3F	; 63
    2a16:	80 83       	st	Z, r24
    2a18:	91 83       	std	Z+1, r25	; 0x01
    2a1a:	a2 83       	std	Z+2, r26	; 0x02
    2a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1e:	8e 01       	movw	r16, r28
    2a20:	05 5a       	subi	r16, 0xA5	; 165
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	fe 01       	movw	r30, r28
    2a26:	e1 5a       	subi	r30, 0xA1	; 161
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	60 81       	ld	r22, Z
    2a2c:	71 81       	ldd	r23, Z+1	; 0x01
    2a2e:	82 81       	ldd	r24, Z+2	; 0x02
    2a30:	93 81       	ldd	r25, Z+3	; 0x03
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4a e7       	ldi	r20, 0x7A	; 122
    2a38:	55 e4       	ldi	r21, 0x45	; 69
    2a3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	80 83       	st	Z, r24
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	a2 83       	std	Z+2, r26	; 0x02
    2a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e5 5a       	subi	r30, 0xA5	; 165
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	82 81       	ldd	r24, Z+2	; 0x02
    2a58:	93 81       	ldd	r25, Z+3	; 0x03
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	40 e8       	ldi	r20, 0x80	; 128
    2a60:	5f e3       	ldi	r21, 0x3F	; 63
    2a62:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a66:	88 23       	and	r24, r24
    2a68:	44 f4       	brge	.+16     	; 0x2a7a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e7 5a       	subi	r30, 0xA7	; 167
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
    2a78:	64 c0       	rjmp	.+200    	; 0x2b42 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	e5 5a       	subi	r30, 0xA5	; 165
    2a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	82 81       	ldd	r24, Z+2	; 0x02
    2a86:	93 81       	ldd	r25, Z+3	; 0x03
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	3f ef       	ldi	r19, 0xFF	; 255
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	57 e4       	ldi	r21, 0x47	; 71
    2a90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a94:	18 16       	cp	r1, r24
    2a96:	0c f0       	brlt	.+2      	; 0x2a9a <LCD_displayCharacter+0xbe>
    2a98:	43 c0       	rjmp	.+134    	; 0x2b20 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e1 5a       	subi	r30, 0xA1	; 161
    2a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa0:	60 81       	ld	r22, Z
    2aa2:	71 81       	ldd	r23, Z+1	; 0x01
    2aa4:	82 81       	ldd	r24, Z+2	; 0x02
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	8e 01       	movw	r16, r28
    2aba:	07 5a       	subi	r16, 0xA7	; 167
    2abc:	1f 4f       	sbci	r17, 0xFF	; 255
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	f8 01       	movw	r30, r16
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
    2ad0:	1f c0       	rjmp	.+62     	; 0x2b10 <LCD_displayCharacter+0x134>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	e9 5a       	subi	r30, 0xA9	; 169
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	80 e9       	ldi	r24, 0x90	; 144
    2ada:	91 e0       	ldi	r25, 0x01	; 1
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	80 83       	st	Z, r24
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e9 5a       	subi	r30, 0xA9	; 169
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <LCD_displayCharacter+0x10e>
    2aee:	fe 01       	movw	r30, r28
    2af0:	e9 5a       	subi	r30, 0xA9	; 169
    2af2:	ff 4f       	sbci	r31, 0xFF	; 255
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	de 01       	movw	r26, r28
    2afa:	a7 5a       	subi	r26, 0xA7	; 167
    2afc:	bf 4f       	sbci	r27, 0xFF	; 255
    2afe:	fe 01       	movw	r30, r28
    2b00:	e7 5a       	subi	r30, 0xA7	; 167
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 81       	ld	r24, Z
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	11 96       	adiw	r26, 0x01	; 1
    2b0c:	9c 93       	st	X, r25
    2b0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b10:	fe 01       	movw	r30, r28
    2b12:	e7 5a       	subi	r30, 0xA7	; 167
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	80 81       	ld	r24, Z
    2b18:	91 81       	ldd	r25, Z+1	; 0x01
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	d1 f6       	brne	.-76     	; 0x2ad2 <LCD_displayCharacter+0xf6>
    2b1e:	27 c0       	rjmp	.+78     	; 0x2b6e <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b20:	8e 01       	movw	r16, r28
    2b22:	07 5a       	subi	r16, 0xA7	; 167
    2b24:	1f 4f       	sbci	r17, 0xFF	; 255
    2b26:	fe 01       	movw	r30, r28
    2b28:	e5 5a       	subi	r30, 0xA5	; 165
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	91 83       	std	Z+1, r25	; 0x01
    2b40:	80 83       	st	Z, r24
    2b42:	de 01       	movw	r26, r28
    2b44:	ab 5a       	subi	r26, 0xAB	; 171
    2b46:	bf 4f       	sbci	r27, 0xFF	; 255
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e7 5a       	subi	r30, 0xA7	; 167
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	91 81       	ldd	r25, Z+1	; 0x01
    2b52:	8d 93       	st	X+, r24
    2b54:	9c 93       	st	X, r25
    2b56:	fe 01       	movw	r30, r28
    2b58:	eb 5a       	subi	r30, 0xAB	; 171
    2b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5c:	80 81       	ld	r24, Z
    2b5e:	91 81       	ldd	r25, Z+1	; 0x01
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <LCD_displayCharacter+0x184>
    2b64:	fe 01       	movw	r30, r28
    2b66:	eb 5a       	subi	r30, 0xAB	; 171
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	62 e0       	ldi	r22, 0x02	; 2
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2b78:	fe 01       	movw	r30, r28
    2b7a:	ef 5a       	subi	r30, 0xAF	; 175
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a0 e8       	ldi	r26, 0x80	; 128
    2b84:	bf e3       	ldi	r27, 0x3F	; 63
    2b86:	80 83       	st	Z, r24
    2b88:	91 83       	std	Z+1, r25	; 0x01
    2b8a:	a2 83       	std	Z+2, r26	; 0x02
    2b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8e:	8e 01       	movw	r16, r28
    2b90:	03 5b       	subi	r16, 0xB3	; 179
    2b92:	1f 4f       	sbci	r17, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	ef 5a       	subi	r30, 0xAF	; 175
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	4a e7       	ldi	r20, 0x7A	; 122
    2ba8:	55 e4       	ldi	r21, 0x45	; 69
    2baa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e3 5b       	subi	r30, 0xB3	; 179
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	60 81       	ld	r22, Z
    2bc4:	71 81       	ldd	r23, Z+1	; 0x01
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e8       	ldi	r20, 0x80	; 128
    2bd0:	5f e3       	ldi	r21, 0x3F	; 63
    2bd2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bd6:	88 23       	and	r24, r24
    2bd8:	44 f4       	brge	.+16     	; 0x2bea <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2bda:	fe 01       	movw	r30, r28
    2bdc:	e5 5b       	subi	r30, 0xB5	; 181
    2bde:	ff 4f       	sbci	r31, 0xFF	; 255
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	80 83       	st	Z, r24
    2be8:	64 c0       	rjmp	.+200    	; 0x2cb2 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e3 5b       	subi	r30, 0xB3	; 179
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	3f ef       	ldi	r19, 0xFF	; 255
    2bfc:	4f e7       	ldi	r20, 0x7F	; 127
    2bfe:	57 e4       	ldi	r21, 0x47	; 71
    2c00:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c04:	18 16       	cp	r1, r24
    2c06:	0c f0       	brlt	.+2      	; 0x2c0a <LCD_displayCharacter+0x22e>
    2c08:	43 c0       	rjmp	.+134    	; 0x2c90 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	ef 5a       	subi	r30, 0xAF	; 175
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e2       	ldi	r20, 0x20	; 32
    2c1e:	51 e4       	ldi	r21, 0x41	; 65
    2c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	8e 01       	movw	r16, r28
    2c2a:	05 5b       	subi	r16, 0xB5	; 181
    2c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c36:	dc 01       	movw	r26, r24
    2c38:	cb 01       	movw	r24, r22
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	80 83       	st	Z, r24
    2c40:	1f c0       	rjmp	.+62     	; 0x2c80 <LCD_displayCharacter+0x2a4>
    2c42:	fe 01       	movw	r30, r28
    2c44:	e7 5b       	subi	r30, 0xB7	; 183
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 e9       	ldi	r24, 0x90	; 144
    2c4a:	91 e0       	ldi	r25, 0x01	; 1
    2c4c:	91 83       	std	Z+1, r25	; 0x01
    2c4e:	80 83       	st	Z, r24
    2c50:	fe 01       	movw	r30, r28
    2c52:	e7 5b       	subi	r30, 0xB7	; 183
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	91 81       	ldd	r25, Z+1	; 0x01
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_displayCharacter+0x27e>
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e7 5b       	subi	r30, 0xB7	; 183
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	91 83       	std	Z+1, r25	; 0x01
    2c66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c68:	de 01       	movw	r26, r28
    2c6a:	a5 5b       	subi	r26, 0xB5	; 181
    2c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e5 5b       	subi	r30, 0xB5	; 181
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	91 81       	ldd	r25, Z+1	; 0x01
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	11 96       	adiw	r26, 0x01	; 1
    2c7c:	9c 93       	st	X, r25
    2c7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	fe 01       	movw	r30, r28
    2c82:	e5 5b       	subi	r30, 0xB5	; 181
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	91 81       	ldd	r25, Z+1	; 0x01
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	d1 f6       	brne	.-76     	; 0x2c42 <LCD_displayCharacter+0x266>
    2c8e:	27 c0       	rjmp	.+78     	; 0x2cde <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	8e 01       	movw	r16, r28
    2c92:	05 5b       	subi	r16, 0xB5	; 181
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	e3 5b       	subi	r30, 0xB3	; 179
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	f8 01       	movw	r30, r16
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	de 01       	movw	r26, r28
    2cb4:	a9 5b       	subi	r26, 0xB9	; 185
    2cb6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cb8:	fe 01       	movw	r30, r28
    2cba:	e5 5b       	subi	r30, 0xB5	; 181
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	80 81       	ld	r24, Z
    2cc0:	91 81       	ldd	r25, Z+1	; 0x01
    2cc2:	8d 93       	st	X+, r24
    2cc4:	9c 93       	st	X, r25
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e9 5b       	subi	r30, 0xB9	; 185
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	91 81       	ldd	r25, Z+1	; 0x01
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_displayCharacter+0x2f4>
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	e9 5b       	subi	r30, 0xB9	; 185
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	91 83       	std	Z+1, r25	; 0x01
    2cdc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ed 59       	subi	r30, 0x9D	; 157
    2ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce4:	80 81       	ld	r24, Z
    2ce6:	88 2f       	mov	r24, r24
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	80 71       	andi	r24, 0x10	; 16
    2cec:	90 70       	andi	r25, 0x00	; 0
    2cee:	95 95       	asr	r25
    2cf0:	87 95       	ror	r24
    2cf2:	95 95       	asr	r25
    2cf4:	87 95       	ror	r24
    2cf6:	95 95       	asr	r25
    2cf8:	87 95       	ror	r24
    2cfa:	95 95       	asr	r25
    2cfc:	87 95       	ror	r24
    2cfe:	98 2f       	mov	r25, r24
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	63 e0       	ldi	r22, 0x03	; 3
    2d04:	49 2f       	mov	r20, r25
    2d06:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ed 59       	subi	r30, 0x9D	; 157
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	88 2f       	mov	r24, r24
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	80 72       	andi	r24, 0x20	; 32
    2d18:	90 70       	andi	r25, 0x00	; 0
    2d1a:	95 95       	asr	r25
    2d1c:	87 95       	ror	r24
    2d1e:	95 95       	asr	r25
    2d20:	87 95       	ror	r24
    2d22:	95 95       	asr	r25
    2d24:	87 95       	ror	r24
    2d26:	95 95       	asr	r25
    2d28:	87 95       	ror	r24
    2d2a:	95 95       	asr	r25
    2d2c:	87 95       	ror	r24
    2d2e:	98 2f       	mov	r25, r24
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	64 e0       	ldi	r22, 0x04	; 4
    2d34:	49 2f       	mov	r20, r25
    2d36:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	ed 59       	subi	r30, 0x9D	; 157
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	80 81       	ld	r24, Z
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	80 74       	andi	r24, 0x40	; 64
    2d48:	90 70       	andi	r25, 0x00	; 0
    2d4a:	08 2e       	mov	r0, r24
    2d4c:	89 2f       	mov	r24, r25
    2d4e:	00 0c       	add	r0, r0
    2d50:	88 1f       	adc	r24, r24
    2d52:	99 0b       	sbc	r25, r25
    2d54:	00 0c       	add	r0, r0
    2d56:	88 1f       	adc	r24, r24
    2d58:	99 1f       	adc	r25, r25
    2d5a:	98 2f       	mov	r25, r24
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	65 e0       	ldi	r22, 0x05	; 5
    2d60:	49 2f       	mov	r20, r25
    2d62:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2d66:	fe 01       	movw	r30, r28
    2d68:	ed 59       	subi	r30, 0x9D	; 157
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	98 2f       	mov	r25, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	99 27       	eor	r25, r25
    2d74:	99 1f       	adc	r25, r25
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	66 e0       	ldi	r22, 0x06	; 6
    2d7a:	49 2f       	mov	r20, r25
    2d7c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2d80:	fe 01       	movw	r30, r28
    2d82:	ed 5b       	subi	r30, 0xBD	; 189
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	a0 e8       	ldi	r26, 0x80	; 128
    2d8c:	bf e3       	ldi	r27, 0x3F	; 63
    2d8e:	80 83       	st	Z, r24
    2d90:	91 83       	std	Z+1, r25	; 0x01
    2d92:	a2 83       	std	Z+2, r26	; 0x02
    2d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d96:	8e 01       	movw	r16, r28
    2d98:	01 5c       	subi	r16, 0xC1	; 193
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ed 5b       	subi	r30, 0xBD	; 189
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a e7       	ldi	r20, 0x7A	; 122
    2db0:	55 e4       	ldi	r21, 0x45	; 69
    2db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	f8 01       	movw	r30, r16
    2dbc:	80 83       	st	Z, r24
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	a2 83       	std	Z+2, r26	; 0x02
    2dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ff 96       	adiw	r30, 0x3f	; 63
    2dc8:	60 81       	ld	r22, Z
    2dca:	71 81       	ldd	r23, Z+1	; 0x01
    2dcc:	82 81       	ldd	r24, Z+2	; 0x02
    2dce:	93 81       	ldd	r25, Z+3	; 0x03
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	40 e8       	ldi	r20, 0x80	; 128
    2dd6:	5f e3       	ldi	r21, 0x3F	; 63
    2dd8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ddc:	88 23       	and	r24, r24
    2dde:	2c f4       	brge	.+10     	; 0x2dea <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	9e af       	std	Y+62, r25	; 0x3e
    2de6:	8d af       	std	Y+61, r24	; 0x3d
    2de8:	46 c0       	rjmp	.+140    	; 0x2e76 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2dea:	fe 01       	movw	r30, r28
    2dec:	ff 96       	adiw	r30, 0x3f	; 63
    2dee:	60 81       	ld	r22, Z
    2df0:	71 81       	ldd	r23, Z+1	; 0x01
    2df2:	82 81       	ldd	r24, Z+2	; 0x02
    2df4:	93 81       	ldd	r25, Z+3	; 0x03
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	64 f5       	brge	.+88     	; 0x2e5e <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	fe 01       	movw	r30, r28
    2e08:	ed 5b       	subi	r30, 0xBD	; 189
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e2       	ldi	r20, 0x20	; 32
    2e1a:	51 e4       	ldi	r21, 0x41	; 65
    2e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9e af       	std	Y+62, r25	; 0x3e
    2e32:	8d af       	std	Y+61, r24	; 0x3d
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <LCD_displayCharacter+0x478>
    2e36:	80 e9       	ldi	r24, 0x90	; 144
    2e38:	91 e0       	ldi	r25, 0x01	; 1
    2e3a:	9c af       	std	Y+60, r25	; 0x3c
    2e3c:	8b af       	std	Y+59, r24	; 0x3b
    2e3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e40:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_displayCharacter+0x466>
    2e46:	9c af       	std	Y+60, r25	; 0x3c
    2e48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	9e af       	std	Y+62, r25	; 0x3e
    2e52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e54:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e56:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	69 f7       	brne	.-38     	; 0x2e36 <LCD_displayCharacter+0x45a>
    2e5c:	16 c0       	rjmp	.+44     	; 0x2e8a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ff 96       	adiw	r30, 0x3f	; 63
    2e62:	60 81       	ld	r22, Z
    2e64:	71 81       	ldd	r23, Z+1	; 0x01
    2e66:	82 81       	ldd	r24, Z+2	; 0x02
    2e68:	93 81       	ldd	r25, Z+3	; 0x03
    2e6a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9e af       	std	Y+62, r25	; 0x3e
    2e74:	8d af       	std	Y+61, r24	; 0x3d
    2e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e7a:	9a af       	std	Y+58, r25	; 0x3a
    2e7c:	89 af       	std	Y+57, r24	; 0x39
    2e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e80:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <LCD_displayCharacter+0x4a6>
    2e86:	9a af       	std	Y+58, r25	; 0x3a
    2e88:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	62 e0       	ldi	r22, 0x02	; 2
    2e8e:	40 e0       	ldi	r20, 0x00	; 0
    2e90:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 e8       	ldi	r26, 0x80	; 128
    2e9a:	bf e3       	ldi	r27, 0x3F	; 63
    2e9c:	8d ab       	std	Y+53, r24	; 0x35
    2e9e:	9e ab       	std	Y+54, r25	; 0x36
    2ea0:	af ab       	std	Y+55, r26	; 0x37
    2ea2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ea6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	4a e7       	ldi	r20, 0x7A	; 122
    2eb2:	55 e4       	ldi	r21, 0x45	; 69
    2eb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	89 ab       	std	Y+49, r24	; 0x31
    2ebe:	9a ab       	std	Y+50, r25	; 0x32
    2ec0:	ab ab       	std	Y+51, r26	; 0x33
    2ec2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ec4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ec6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ec8:	8b a9       	ldd	r24, Y+51	; 0x33
    2eca:	9c a9       	ldd	r25, Y+52	; 0x34
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e8       	ldi	r20, 0x80	; 128
    2ed2:	5f e3       	ldi	r21, 0x3F	; 63
    2ed4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ed8:	88 23       	and	r24, r24
    2eda:	2c f4       	brge	.+10     	; 0x2ee6 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	98 ab       	std	Y+48, r25	; 0x30
    2ee2:	8f a7       	std	Y+47, r24	; 0x2f
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eea:	8b a9       	ldd	r24, Y+51	; 0x33
    2eec:	9c a9       	ldd	r25, Y+52	; 0x34
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	3f ef       	ldi	r19, 0xFF	; 255
    2ef2:	4f e7       	ldi	r20, 0x7F	; 127
    2ef4:	57 e4       	ldi	r21, 0x47	; 71
    2ef6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2efa:	18 16       	cp	r1, r24
    2efc:	4c f5       	brge	.+82     	; 0x2f50 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efe:	6d a9       	ldd	r22, Y+53	; 0x35
    2f00:	7e a9       	ldd	r23, Y+54	; 0x36
    2f02:	8f a9       	ldd	r24, Y+55	; 0x37
    2f04:	98 ad       	ldd	r25, Y+56	; 0x38
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	30 e0       	ldi	r19, 0x00	; 0
    2f0a:	40 e2       	ldi	r20, 0x20	; 32
    2f0c:	51 e4       	ldi	r21, 0x41	; 65
    2f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	bc 01       	movw	r22, r24
    2f18:	cd 01       	movw	r24, r26
    2f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	98 ab       	std	Y+48, r25	; 0x30
    2f24:	8f a7       	std	Y+47, r24	; 0x2f
    2f26:	0f c0       	rjmp	.+30     	; 0x2f46 <LCD_displayCharacter+0x56a>
    2f28:	80 e9       	ldi	r24, 0x90	; 144
    2f2a:	91 e0       	ldi	r25, 0x01	; 1
    2f2c:	9e a7       	std	Y+46, r25	; 0x2e
    2f2e:	8d a7       	std	Y+45, r24	; 0x2d
    2f30:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f32:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_displayCharacter+0x558>
    2f38:	9e a7       	std	Y+46, r25	; 0x2e
    2f3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	98 ab       	std	Y+48, r25	; 0x30
    2f44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f48:	98 a9       	ldd	r25, Y+48	; 0x30
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	69 f7       	brne	.-38     	; 0x2f28 <LCD_displayCharacter+0x54c>
    2f4e:	14 c0       	rjmp	.+40     	; 0x2f78 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f50:	69 a9       	ldd	r22, Y+49	; 0x31
    2f52:	7a a9       	ldd	r23, Y+50	; 0x32
    2f54:	8b a9       	ldd	r24, Y+51	; 0x33
    2f56:	9c a9       	ldd	r25, Y+52	; 0x34
    2f58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	98 ab       	std	Y+48, r25	; 0x30
    2f62:	8f a7       	std	Y+47, r24	; 0x2f
    2f64:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f66:	98 a9       	ldd	r25, Y+48	; 0x30
    2f68:	9c a7       	std	Y+44, r25	; 0x2c
    2f6a:	8b a7       	std	Y+43, r24	; 0x2b
    2f6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <LCD_displayCharacter+0x594>
    2f74:	9c a7       	std	Y+44, r25	; 0x2c
    2f76:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	62 e0       	ldi	r22, 0x02	; 2
    2f7c:	41 e0       	ldi	r20, 0x01	; 1
    2f7e:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	a0 e8       	ldi	r26, 0x80	; 128
    2f88:	bf e3       	ldi	r27, 0x3F	; 63
    2f8a:	8f a3       	std	Y+39, r24	; 0x27
    2f8c:	98 a7       	std	Y+40, r25	; 0x28
    2f8e:	a9 a7       	std	Y+41, r26	; 0x29
    2f90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f92:	6f a1       	ldd	r22, Y+39	; 0x27
    2f94:	78 a5       	ldd	r23, Y+40	; 0x28
    2f96:	89 a5       	ldd	r24, Y+41	; 0x29
    2f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	4a e7       	ldi	r20, 0x7A	; 122
    2fa0:	55 e4       	ldi	r21, 0x45	; 69
    2fa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	8b a3       	std	Y+35, r24	; 0x23
    2fac:	9c a3       	std	Y+36, r25	; 0x24
    2fae:	ad a3       	std	Y+37, r26	; 0x25
    2fb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fb2:	6b a1       	ldd	r22, Y+35	; 0x23
    2fb4:	7c a1       	ldd	r23, Y+36	; 0x24
    2fb6:	8d a1       	ldd	r24, Y+37	; 0x25
    2fb8:	9e a1       	ldd	r25, Y+38	; 0x26
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	40 e8       	ldi	r20, 0x80	; 128
    2fc0:	5f e3       	ldi	r21, 0x3F	; 63
    2fc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2fc6:	88 23       	and	r24, r24
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	9a a3       	std	Y+34, r25	; 0x22
    2fd0:	89 a3       	std	Y+33, r24	; 0x21
    2fd2:	3f c0       	rjmp	.+126    	; 0x3052 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2fd4:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd6:	7c a1       	ldd	r23, Y+36	; 0x24
    2fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    2fda:	9e a1       	ldd	r25, Y+38	; 0x26
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f e7       	ldi	r20, 0x7F	; 127
    2fe2:	57 e4       	ldi	r21, 0x47	; 71
    2fe4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	4c f5       	brge	.+82     	; 0x303e <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fec:	6f a1       	ldd	r22, Y+39	; 0x27
    2fee:	78 a5       	ldd	r23, Y+40	; 0x28
    2ff0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e2       	ldi	r20, 0x20	; 32
    2ffa:	51 e4       	ldi	r21, 0x41	; 65
    2ffc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	bc 01       	movw	r22, r24
    3006:	cd 01       	movw	r24, r26
    3008:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9a a3       	std	Y+34, r25	; 0x22
    3012:	89 a3       	std	Y+33, r24	; 0x21
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <LCD_displayCharacter+0x658>
    3016:	80 e9       	ldi	r24, 0x90	; 144
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	98 a3       	std	Y+32, r25	; 0x20
    301c:	8f 8f       	std	Y+31, r24	; 0x1f
    301e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3020:	98 a1       	ldd	r25, Y+32	; 0x20
    3022:	01 97       	sbiw	r24, 0x01	; 1
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_displayCharacter+0x646>
    3026:	98 a3       	std	Y+32, r25	; 0x20
    3028:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    302a:	89 a1       	ldd	r24, Y+33	; 0x21
    302c:	9a a1       	ldd	r25, Y+34	; 0x22
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	9a a3       	std	Y+34, r25	; 0x22
    3032:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3034:	89 a1       	ldd	r24, Y+33	; 0x21
    3036:	9a a1       	ldd	r25, Y+34	; 0x22
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	69 f7       	brne	.-38     	; 0x3016 <LCD_displayCharacter+0x63a>
    303c:	14 c0       	rjmp	.+40     	; 0x3066 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    303e:	6b a1       	ldd	r22, Y+35	; 0x23
    3040:	7c a1       	ldd	r23, Y+36	; 0x24
    3042:	8d a1       	ldd	r24, Y+37	; 0x25
    3044:	9e a1       	ldd	r25, Y+38	; 0x26
    3046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9a a3       	std	Y+34, r25	; 0x22
    3050:	89 a3       	std	Y+33, r24	; 0x21
    3052:	89 a1       	ldd	r24, Y+33	; 0x21
    3054:	9a a1       	ldd	r25, Y+34	; 0x22
    3056:	9e 8f       	std	Y+30, r25	; 0x1e
    3058:	8d 8f       	std	Y+29, r24	; 0x1d
    305a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    305c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <LCD_displayCharacter+0x682>
    3062:	9e 8f       	std	Y+30, r25	; 0x1e
    3064:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3066:	fe 01       	movw	r30, r28
    3068:	ed 59       	subi	r30, 0x9D	; 157
    306a:	ff 4f       	sbci	r31, 0xFF	; 255
    306c:	80 81       	ld	r24, Z
    306e:	98 2f       	mov	r25, r24
    3070:	91 70       	andi	r25, 0x01	; 1
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	63 e0       	ldi	r22, 0x03	; 3
    3076:	49 2f       	mov	r20, r25
    3078:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    307c:	fe 01       	movw	r30, r28
    307e:	ed 59       	subi	r30, 0x9D	; 157
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	80 81       	ld	r24, Z
    3084:	88 2f       	mov	r24, r24
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	82 70       	andi	r24, 0x02	; 2
    308a:	90 70       	andi	r25, 0x00	; 0
    308c:	95 95       	asr	r25
    308e:	87 95       	ror	r24
    3090:	98 2f       	mov	r25, r24
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	64 e0       	ldi	r22, 0x04	; 4
    3096:	49 2f       	mov	r20, r25
    3098:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    309c:	fe 01       	movw	r30, r28
    309e:	ed 59       	subi	r30, 0x9D	; 157
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	88 2f       	mov	r24, r24
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	84 70       	andi	r24, 0x04	; 4
    30aa:	90 70       	andi	r25, 0x00	; 0
    30ac:	95 95       	asr	r25
    30ae:	87 95       	ror	r24
    30b0:	95 95       	asr	r25
    30b2:	87 95       	ror	r24
    30b4:	98 2f       	mov	r25, r24
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	65 e0       	ldi	r22, 0x05	; 5
    30ba:	49 2f       	mov	r20, r25
    30bc:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    30c0:	fe 01       	movw	r30, r28
    30c2:	ed 59       	subi	r30, 0x9D	; 157
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	88 70       	andi	r24, 0x08	; 8
    30ce:	90 70       	andi	r25, 0x00	; 0
    30d0:	95 95       	asr	r25
    30d2:	87 95       	ror	r24
    30d4:	95 95       	asr	r25
    30d6:	87 95       	ror	r24
    30d8:	95 95       	asr	r25
    30da:	87 95       	ror	r24
    30dc:	98 2f       	mov	r25, r24
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	66 e0       	ldi	r22, 0x06	; 6
    30e2:	49 2f       	mov	r20, r25
    30e4:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a0 e8       	ldi	r26, 0x80	; 128
    30ee:	bf e3       	ldi	r27, 0x3F	; 63
    30f0:	89 8f       	std	Y+25, r24	; 0x19
    30f2:	9a 8f       	std	Y+26, r25	; 0x1a
    30f4:	ab 8f       	std	Y+27, r26	; 0x1b
    30f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	69 8d       	ldd	r22, Y+25	; 0x19
    30fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	4a e7       	ldi	r20, 0x7A	; 122
    3106:	55 e4       	ldi	r21, 0x45	; 69
    3108:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	8d 8b       	std	Y+21, r24	; 0x15
    3112:	9e 8b       	std	Y+22, r25	; 0x16
    3114:	af 8b       	std	Y+23, r26	; 0x17
    3116:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3118:	6d 89       	ldd	r22, Y+21	; 0x15
    311a:	7e 89       	ldd	r23, Y+22	; 0x16
    311c:	8f 89       	ldd	r24, Y+23	; 0x17
    311e:	98 8d       	ldd	r25, Y+24	; 0x18
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	2c f4       	brge	.+10     	; 0x313a <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9c 8b       	std	Y+20, r25	; 0x14
    3136:	8b 8b       	std	Y+19, r24	; 0x13
    3138:	3f c0       	rjmp	.+126    	; 0x31b8 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    313a:	6d 89       	ldd	r22, Y+21	; 0x15
    313c:	7e 89       	ldd	r23, Y+22	; 0x16
    313e:	8f 89       	ldd	r24, Y+23	; 0x17
    3140:	98 8d       	ldd	r25, Y+24	; 0x18
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	4c f5       	brge	.+82     	; 0x31a4 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3152:	69 8d       	ldd	r22, Y+25	; 0x19
    3154:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3156:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3158:	9c 8d       	ldd	r25, Y+28	; 0x1c
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e2       	ldi	r20, 0x20	; 32
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9c 8b       	std	Y+20, r25	; 0x14
    3178:	8b 8b       	std	Y+19, r24	; 0x13
    317a:	0f c0       	rjmp	.+30     	; 0x319a <LCD_displayCharacter+0x7be>
    317c:	80 e9       	ldi	r24, 0x90	; 144
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	9a 8b       	std	Y+18, r25	; 0x12
    3182:	89 8b       	std	Y+17, r24	; 0x11
    3184:	89 89       	ldd	r24, Y+17	; 0x11
    3186:	9a 89       	ldd	r25, Y+18	; 0x12
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_displayCharacter+0x7ac>
    318c:	9a 8b       	std	Y+18, r25	; 0x12
    318e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	8b 89       	ldd	r24, Y+19	; 0x13
    3192:	9c 89       	ldd	r25, Y+20	; 0x14
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	9c 8b       	std	Y+20, r25	; 0x14
    3198:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	8b 89       	ldd	r24, Y+19	; 0x13
    319c:	9c 89       	ldd	r25, Y+20	; 0x14
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	69 f7       	brne	.-38     	; 0x317c <LCD_displayCharacter+0x7a0>
    31a2:	14 c0       	rjmp	.+40     	; 0x31cc <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a4:	6d 89       	ldd	r22, Y+21	; 0x15
    31a6:	7e 89       	ldd	r23, Y+22	; 0x16
    31a8:	8f 89       	ldd	r24, Y+23	; 0x17
    31aa:	98 8d       	ldd	r25, Y+24	; 0x18
    31ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9c 8b       	std	Y+20, r25	; 0x14
    31b6:	8b 8b       	std	Y+19, r24	; 0x13
    31b8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ba:	9c 89       	ldd	r25, Y+20	; 0x14
    31bc:	98 8b       	std	Y+16, r25	; 0x10
    31be:	8f 87       	std	Y+15, r24	; 0x0f
    31c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c2:	98 89       	ldd	r25, Y+16	; 0x10
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <LCD_displayCharacter+0x7e8>
    31c8:	98 8b       	std	Y+16, r25	; 0x10
    31ca:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <GPIO_writePin>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	a0 e8       	ldi	r26, 0x80	; 128
    31dc:	bf e3       	ldi	r27, 0x3F	; 63
    31de:	8b 87       	std	Y+11, r24	; 0x0b
    31e0:	9c 87       	std	Y+12, r25	; 0x0c
    31e2:	ad 87       	std	Y+13, r26	; 0x0d
    31e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    31ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	4a e7       	ldi	r20, 0x7A	; 122
    31f4:	55 e4       	ldi	r21, 0x45	; 69
    31f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	8f 83       	std	Y+7, r24	; 0x07
    3200:	98 87       	std	Y+8, r25	; 0x08
    3202:	a9 87       	std	Y+9, r26	; 0x09
    3204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3206:	6f 81       	ldd	r22, Y+7	; 0x07
    3208:	78 85       	ldd	r23, Y+8	; 0x08
    320a:	89 85       	ldd	r24, Y+9	; 0x09
    320c:	9a 85       	ldd	r25, Y+10	; 0x0a
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e8       	ldi	r20, 0x80	; 128
    3214:	5f e3       	ldi	r21, 0x3F	; 63
    3216:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    321a:	88 23       	and	r24, r24
    321c:	2c f4       	brge	.+10     	; 0x3228 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	9e 83       	std	Y+6, r25	; 0x06
    3224:	8d 83       	std	Y+5, r24	; 0x05
    3226:	3f c0       	rjmp	.+126    	; 0x32a6 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3228:	6f 81       	ldd	r22, Y+7	; 0x07
    322a:	78 85       	ldd	r23, Y+8	; 0x08
    322c:	89 85       	ldd	r24, Y+9	; 0x09
    322e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	4f e7       	ldi	r20, 0x7F	; 127
    3236:	57 e4       	ldi	r21, 0x47	; 71
    3238:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    323c:	18 16       	cp	r1, r24
    323e:	4c f5       	brge	.+82     	; 0x3292 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3240:	6b 85       	ldd	r22, Y+11	; 0x0b
    3242:	7c 85       	ldd	r23, Y+12	; 0x0c
    3244:	8d 85       	ldd	r24, Y+13	; 0x0d
    3246:	9e 85       	ldd	r25, Y+14	; 0x0e
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e2       	ldi	r20, 0x20	; 32
    324e:	51 e4       	ldi	r21, 0x41	; 65
    3250:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	bc 01       	movw	r22, r24
    325a:	cd 01       	movw	r24, r26
    325c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9e 83       	std	Y+6, r25	; 0x06
    3266:	8d 83       	std	Y+5, r24	; 0x05
    3268:	0f c0       	rjmp	.+30     	; 0x3288 <LCD_displayCharacter+0x8ac>
    326a:	80 e9       	ldi	r24, 0x90	; 144
    326c:	91 e0       	ldi	r25, 0x01	; 1
    326e:	9c 83       	std	Y+4, r25	; 0x04
    3270:	8b 83       	std	Y+3, r24	; 0x03
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	9c 81       	ldd	r25, Y+4	; 0x04
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <LCD_displayCharacter+0x89a>
    327a:	9c 83       	std	Y+4, r25	; 0x04
    327c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327e:	8d 81       	ldd	r24, Y+5	; 0x05
    3280:	9e 81       	ldd	r25, Y+6	; 0x06
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	69 f7       	brne	.-38     	; 0x326a <LCD_displayCharacter+0x88e>
    3290:	14 c0       	rjmp	.+40     	; 0x32ba <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	9e 81       	ldd	r25, Y+6	; 0x06
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	9a 81       	ldd	r25, Y+2	; 0x02
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <LCD_displayCharacter+0x8d6>
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    32ba:	cd 59       	subi	r28, 0x9D	; 157
    32bc:	df 4f       	sbci	r29, 0xFF	; 255
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	f8 94       	cli
    32c2:	de bf       	out	0x3e, r29	; 62
    32c4:	0f be       	out	0x3f, r0	; 63
    32c6:	cd bf       	out	0x3d, r28	; 61
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	1f 91       	pop	r17
    32ce:	0f 91       	pop	r16
    32d0:	08 95       	ret

000032d2 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <LCD_displayString+0x6>
    32d8:	0f 92       	push	r0
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	9b 83       	std	Y+3, r25	; 0x03
    32e0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32e2:	19 82       	std	Y+1, r1	; 0x01
    32e4:	0e c0       	rjmp	.+28     	; 0x3302 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	8a 81       	ldd	r24, Y+2	; 0x02
    32ee:	9b 81       	ldd	r25, Y+3	; 0x03
    32f0:	fc 01       	movw	r30, r24
    32f2:	e2 0f       	add	r30, r18
    32f4:	f3 1f       	adc	r31, r19
    32f6:	80 81       	ld	r24, Z
    32f8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <LCD_displayCharacter>
		i++;
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	8f 5f       	subi	r24, 0xFF	; 255
    3300:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	9b 81       	ldd	r25, Y+3	; 0x03
    330c:	fc 01       	movw	r30, r24
    330e:	e2 0f       	add	r30, r18
    3310:	f3 1f       	adc	r31, r19
    3312:	80 81       	ld	r24, Z
    3314:	88 23       	and	r24, r24
    3316:	39 f7       	brne	.-50     	; 0x32e6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	00 d0       	rcall	.+0      	; 0x332a <LCD_moveCursor+0x6>
    332a:	00 d0       	rcall	.+0      	; 0x332c <LCD_moveCursor+0x8>
    332c:	0f 92       	push	r0
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	8a 83       	std	Y+2, r24	; 0x02
    3334:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	3d 83       	std	Y+5, r19	; 0x05
    333e:	2c 83       	std	Y+4, r18	; 0x04
    3340:	8c 81       	ldd	r24, Y+4	; 0x04
    3342:	9d 81       	ldd	r25, Y+5	; 0x05
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	91 05       	cpc	r25, r1
    3348:	c1 f0       	breq	.+48     	; 0x337a <LCD_moveCursor+0x56>
    334a:	2c 81       	ldd	r18, Y+4	; 0x04
    334c:	3d 81       	ldd	r19, Y+5	; 0x05
    334e:	22 30       	cpi	r18, 0x02	; 2
    3350:	31 05       	cpc	r19, r1
    3352:	2c f4       	brge	.+10     	; 0x335e <LCD_moveCursor+0x3a>
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	9d 81       	ldd	r25, Y+5	; 0x05
    3358:	00 97       	sbiw	r24, 0x00	; 0
    335a:	61 f0       	breq	.+24     	; 0x3374 <LCD_moveCursor+0x50>
    335c:	19 c0       	rjmp	.+50     	; 0x3390 <LCD_moveCursor+0x6c>
    335e:	2c 81       	ldd	r18, Y+4	; 0x04
    3360:	3d 81       	ldd	r19, Y+5	; 0x05
    3362:	22 30       	cpi	r18, 0x02	; 2
    3364:	31 05       	cpc	r19, r1
    3366:	69 f0       	breq	.+26     	; 0x3382 <LCD_moveCursor+0x5e>
    3368:	8c 81       	ldd	r24, Y+4	; 0x04
    336a:	9d 81       	ldd	r25, Y+5	; 0x05
    336c:	83 30       	cpi	r24, 0x03	; 3
    336e:	91 05       	cpc	r25, r1
    3370:	61 f0       	breq	.+24     	; 0x338a <LCD_moveCursor+0x66>
    3372:	0e c0       	rjmp	.+28     	; 0x3390 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	0b c0       	rjmp	.+22     	; 0x3390 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    337a:	8b 81       	ldd	r24, Y+3	; 0x03
    337c:	80 5c       	subi	r24, 0xC0	; 192
    337e:	89 83       	std	Y+1, r24	; 0x01
    3380:	07 c0       	rjmp	.+14     	; 0x3390 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3382:	8b 81       	ldd	r24, Y+3	; 0x03
    3384:	80 5f       	subi	r24, 0xF0	; 240
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	80 5b       	subi	r24, 0xB0	; 176
    338e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3390:	89 81       	ldd	r24, Y+1	; 0x01
    3392:	80 68       	ori	r24, 0x80	; 128
    3394:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>
}
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	cf 91       	pop	r28
    33a4:	df 91       	pop	r29
    33a6:	08 95       	ret

000033a8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	00 d0       	rcall	.+0      	; 0x33ae <LCD_displayStringRowColumn+0x6>
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <LCD_displayStringRowColumn+0x8>
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	89 83       	std	Y+1, r24	; 0x01
    33b6:	6a 83       	std	Y+2, r22	; 0x02
    33b8:	5c 83       	std	Y+4, r21	; 0x04
    33ba:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	6a 81       	ldd	r22, Y+2	; 0x02
    33c0:	0e 94 92 19 	call	0x3324	; 0x3324 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    33c4:	8b 81       	ldd	r24, Y+3	; 0x03
    33c6:	9c 81       	ldd	r25, Y+4	; 0x04
    33c8:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
}
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	cd b7       	in	r28, 0x3d	; 61
    33e0:	de b7       	in	r29, 0x3e	; 62
    33e2:	62 97       	sbiw	r28, 0x12	; 18
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	9a 8b       	std	Y+18, r25	; 0x12
    33f0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    33f2:	89 89       	ldd	r24, Y+17	; 0x11
    33f4:	9a 89       	ldd	r25, Y+18	; 0x12
    33f6:	9e 01       	movw	r18, r28
    33f8:	2f 5f       	subi	r18, 0xFF	; 255
    33fa:	3f 4f       	sbci	r19, 0xFF	; 255
    33fc:	b9 01       	movw	r22, r18
    33fe:	4a e0       	ldi	r20, 0x0A	; 10
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <itoa>
   LCD_displayString(buff); /* Display the string */
    3406:	ce 01       	movw	r24, r28
    3408:	01 96       	adiw	r24, 0x01	; 1
    340a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <LCD_displayString>
}
    340e:	62 96       	adiw	r28, 0x12	; 18
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_sendCommand>
}
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	00 d0       	rcall	.+0      	; 0x343a <UART_init+0x6>
    343a:	00 d0       	rcall	.+0      	; 0x343c <UART_init+0x8>
    343c:	00 d0       	rcall	.+0      	; 0x343e <UART_init+0xa>
    343e:	cd b7       	in	r28, 0x3d	; 61
    3440:	de b7       	in	r29, 0x3e	; 62
    3442:	6b 83       	std	Y+3, r22	; 0x03
    3444:	7c 83       	std	Y+4, r23	; 0x04
    3446:	8d 83       	std	Y+5, r24	; 0x05
    3448:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    344a:	1a 82       	std	Y+2, r1	; 0x02
    344c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    344e:	eb e2       	ldi	r30, 0x2B	; 43
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	82 e0       	ldi	r24, 0x02	; 2
    3454:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3456:	ea e2       	ldi	r30, 0x2A	; 42
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	88 e1       	ldi	r24, 0x18	; 24
    345c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    345e:	e0 e4       	ldi	r30, 0x40	; 64
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	86 e8       	ldi	r24, 0x86	; 134
    3464:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	9c 81       	ldd	r25, Y+4	; 0x04
    346a:	ad 81       	ldd	r26, Y+5	; 0x05
    346c:	be 81       	ldd	r27, Y+6	; 0x06
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	aa 1f       	adc	r26, r26
    3474:	bb 1f       	adc	r27, r27
    3476:	88 0f       	add	r24, r24
    3478:	99 1f       	adc	r25, r25
    347a:	aa 1f       	adc	r26, r26
    347c:	bb 1f       	adc	r27, r27
    347e:	88 0f       	add	r24, r24
    3480:	99 1f       	adc	r25, r25
    3482:	aa 1f       	adc	r26, r26
    3484:	bb 1f       	adc	r27, r27
    3486:	9c 01       	movw	r18, r24
    3488:	ad 01       	movw	r20, r26
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	94 e2       	ldi	r25, 0x24	; 36
    348e:	a4 ef       	ldi	r26, 0xF4	; 244
    3490:	b0 e0       	ldi	r27, 0x00	; 0
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 f8 1a 	call	0x35f0	; 0x35f0 <__udivmodsi4>
    349a:	da 01       	movw	r26, r20
    349c:	c9 01       	movw	r24, r18
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9a 83       	std	Y+2, r25	; 0x02
    34a2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    34a4:	e0 e4       	ldi	r30, 0x40	; 64
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	9a 81       	ldd	r25, Y+2	; 0x02
    34ac:	89 2f       	mov	r24, r25
    34ae:	99 27       	eor	r25, r25
    34b0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    34b2:	e9 e2       	ldi	r30, 0x29	; 41
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	80 83       	st	Z, r24
}
    34ba:	26 96       	adiw	r28, 0x06	; 6
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	0f 92       	push	r0
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    34d8:	eb e2       	ldi	r30, 0x2B	; 43
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	88 2f       	mov	r24, r24
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	80 72       	andi	r24, 0x20	; 32
    34e4:	90 70       	andi	r25, 0x00	; 0
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	b9 f3       	breq	.-18     	; 0x34d8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    34ea:	ec e2       	ldi	r30, 0x2C	; 44
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    34f2:	0f 90       	pop	r0
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	08 95       	ret

000034fa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    34fa:	df 93       	push	r29
    34fc:	cf 93       	push	r28
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3502:	eb e2       	ldi	r30, 0x2B	; 43
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	88 23       	and	r24, r24
    350a:	dc f7       	brge	.-10     	; 0x3502 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    350c:	ec e2       	ldi	r30, 0x2C	; 44
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	80 81       	ld	r24, Z
}
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	00 d0       	rcall	.+0      	; 0x351e <UART_sendString+0x6>
    351e:	0f 92       	push	r0
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	9b 83       	std	Y+3, r25	; 0x03
    3526:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3528:	19 82       	std	Y+1, r1	; 0x01
    352a:	0e c0       	rjmp	.+28     	; 0x3548 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	28 2f       	mov	r18, r24
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	9b 81       	ldd	r25, Y+3	; 0x03
    3536:	fc 01       	movw	r30, r24
    3538:	e2 0f       	add	r30, r18
    353a:	f3 1f       	adc	r31, r19
    353c:	80 81       	ld	r24, Z
    353e:	0e 94 66 1a 	call	0x34cc	; 0x34cc <UART_sendByte>
		i++;
    3542:	89 81       	ldd	r24, Y+1	; 0x01
    3544:	8f 5f       	subi	r24, 0xFF	; 255
    3546:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	fc 01       	movw	r30, r24
    3554:	e2 0f       	add	r30, r18
    3556:	f3 1f       	adc	r31, r19
    3558:	80 81       	ld	r24, Z
    355a:	88 23       	and	r24, r24
    355c:	39 f7       	brne	.-50     	; 0x352c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	df 93       	push	r29
    3570:	cf 93       	push	r28
    3572:	00 d0       	rcall	.+0      	; 0x3574 <UART_receiveString+0xa>
    3574:	0f 92       	push	r0
    3576:	cd b7       	in	r28, 0x3d	; 61
    3578:	de b7       	in	r29, 0x3e	; 62
    357a:	9b 83       	std	Y+3, r25	; 0x03
    357c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    357e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3580:	89 81       	ldd	r24, Y+1	; 0x01
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	8a 81       	ldd	r24, Y+2	; 0x02
    3588:	9b 81       	ldd	r25, Y+3	; 0x03
    358a:	8c 01       	movw	r16, r24
    358c:	02 0f       	add	r16, r18
    358e:	13 1f       	adc	r17, r19
    3590:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <UART_recieveByte>
    3594:	f8 01       	movw	r30, r16
    3596:	80 83       	st	Z, r24
    3598:	0f c0       	rjmp	.+30     	; 0x35b8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    359a:	89 81       	ldd	r24, Y+1	; 0x01
    359c:	8f 5f       	subi	r24, 0xFF	; 255
    359e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    35a0:	89 81       	ldd	r24, Y+1	; 0x01
    35a2:	28 2f       	mov	r18, r24
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	8c 01       	movw	r16, r24
    35ac:	02 0f       	add	r16, r18
    35ae:	13 1f       	adc	r17, r19
    35b0:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <UART_recieveByte>
    35b4:	f8 01       	movw	r30, r16
    35b6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	8a 81       	ldd	r24, Y+2	; 0x02
    35c0:	9b 81       	ldd	r25, Y+3	; 0x03
    35c2:	fc 01       	movw	r30, r24
    35c4:	e2 0f       	add	r30, r18
    35c6:	f3 1f       	adc	r31, r19
    35c8:	80 81       	ld	r24, Z
    35ca:	83 32       	cpi	r24, 0x23	; 35
    35cc:	31 f7       	brne	.-52     	; 0x359a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	28 2f       	mov	r18, r24
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	8a 81       	ldd	r24, Y+2	; 0x02
    35d6:	9b 81       	ldd	r25, Y+3	; 0x03
    35d8:	fc 01       	movw	r30, r24
    35da:	e2 0f       	add	r30, r18
    35dc:	f3 1f       	adc	r31, r19
    35de:	10 82       	st	Z, r1
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	1f 91       	pop	r17
    35ec:	0f 91       	pop	r16
    35ee:	08 95       	ret

000035f0 <__udivmodsi4>:
    35f0:	a1 e2       	ldi	r26, 0x21	; 33
    35f2:	1a 2e       	mov	r1, r26
    35f4:	aa 1b       	sub	r26, r26
    35f6:	bb 1b       	sub	r27, r27
    35f8:	fd 01       	movw	r30, r26
    35fa:	0d c0       	rjmp	.+26     	; 0x3616 <__udivmodsi4_ep>

000035fc <__udivmodsi4_loop>:
    35fc:	aa 1f       	adc	r26, r26
    35fe:	bb 1f       	adc	r27, r27
    3600:	ee 1f       	adc	r30, r30
    3602:	ff 1f       	adc	r31, r31
    3604:	a2 17       	cp	r26, r18
    3606:	b3 07       	cpc	r27, r19
    3608:	e4 07       	cpc	r30, r20
    360a:	f5 07       	cpc	r31, r21
    360c:	20 f0       	brcs	.+8      	; 0x3616 <__udivmodsi4_ep>
    360e:	a2 1b       	sub	r26, r18
    3610:	b3 0b       	sbc	r27, r19
    3612:	e4 0b       	sbc	r30, r20
    3614:	f5 0b       	sbc	r31, r21

00003616 <__udivmodsi4_ep>:
    3616:	66 1f       	adc	r22, r22
    3618:	77 1f       	adc	r23, r23
    361a:	88 1f       	adc	r24, r24
    361c:	99 1f       	adc	r25, r25
    361e:	1a 94       	dec	r1
    3620:	69 f7       	brne	.-38     	; 0x35fc <__udivmodsi4_loop>
    3622:	60 95       	com	r22
    3624:	70 95       	com	r23
    3626:	80 95       	com	r24
    3628:	90 95       	com	r25
    362a:	9b 01       	movw	r18, r22
    362c:	ac 01       	movw	r20, r24
    362e:	bd 01       	movw	r22, r26
    3630:	cf 01       	movw	r24, r30
    3632:	08 95       	ret

00003634 <__prologue_saves__>:
    3634:	2f 92       	push	r2
    3636:	3f 92       	push	r3
    3638:	4f 92       	push	r4
    363a:	5f 92       	push	r5
    363c:	6f 92       	push	r6
    363e:	7f 92       	push	r7
    3640:	8f 92       	push	r8
    3642:	9f 92       	push	r9
    3644:	af 92       	push	r10
    3646:	bf 92       	push	r11
    3648:	cf 92       	push	r12
    364a:	df 92       	push	r13
    364c:	ef 92       	push	r14
    364e:	ff 92       	push	r15
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	ca 1b       	sub	r28, r26
    365e:	db 0b       	sbc	r29, r27
    3660:	0f b6       	in	r0, 0x3f	; 63
    3662:	f8 94       	cli
    3664:	de bf       	out	0x3e, r29	; 62
    3666:	0f be       	out	0x3f, r0	; 63
    3668:	cd bf       	out	0x3d, r28	; 61
    366a:	09 94       	ijmp

0000366c <__epilogue_restores__>:
    366c:	2a 88       	ldd	r2, Y+18	; 0x12
    366e:	39 88       	ldd	r3, Y+17	; 0x11
    3670:	48 88       	ldd	r4, Y+16	; 0x10
    3672:	5f 84       	ldd	r5, Y+15	; 0x0f
    3674:	6e 84       	ldd	r6, Y+14	; 0x0e
    3676:	7d 84       	ldd	r7, Y+13	; 0x0d
    3678:	8c 84       	ldd	r8, Y+12	; 0x0c
    367a:	9b 84       	ldd	r9, Y+11	; 0x0b
    367c:	aa 84       	ldd	r10, Y+10	; 0x0a
    367e:	b9 84       	ldd	r11, Y+9	; 0x09
    3680:	c8 84       	ldd	r12, Y+8	; 0x08
    3682:	df 80       	ldd	r13, Y+7	; 0x07
    3684:	ee 80       	ldd	r14, Y+6	; 0x06
    3686:	fd 80       	ldd	r15, Y+5	; 0x05
    3688:	0c 81       	ldd	r16, Y+4	; 0x04
    368a:	1b 81       	ldd	r17, Y+3	; 0x03
    368c:	aa 81       	ldd	r26, Y+2	; 0x02
    368e:	b9 81       	ldd	r27, Y+1	; 0x01
    3690:	ce 0f       	add	r28, r30
    3692:	d1 1d       	adc	r29, r1
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	ed 01       	movw	r28, r26
    36a0:	08 95       	ret

000036a2 <itoa>:
    36a2:	fb 01       	movw	r30, r22
    36a4:	9f 01       	movw	r18, r30
    36a6:	e8 94       	clt
    36a8:	42 30       	cpi	r20, 0x02	; 2
    36aa:	c4 f0       	brlt	.+48     	; 0x36dc <itoa+0x3a>
    36ac:	45 32       	cpi	r20, 0x25	; 37
    36ae:	b4 f4       	brge	.+44     	; 0x36dc <itoa+0x3a>
    36b0:	4a 30       	cpi	r20, 0x0A	; 10
    36b2:	29 f4       	brne	.+10     	; 0x36be <itoa+0x1c>
    36b4:	97 fb       	bst	r25, 7
    36b6:	1e f4       	brtc	.+6      	; 0x36be <itoa+0x1c>
    36b8:	90 95       	com	r25
    36ba:	81 95       	neg	r24
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	64 2f       	mov	r22, r20
    36c0:	77 27       	eor	r23, r23
    36c2:	0e 94 82 1b 	call	0x3704	; 0x3704 <__udivmodhi4>
    36c6:	80 5d       	subi	r24, 0xD0	; 208
    36c8:	8a 33       	cpi	r24, 0x3A	; 58
    36ca:	0c f0       	brlt	.+2      	; 0x36ce <itoa+0x2c>
    36cc:	89 5d       	subi	r24, 0xD9	; 217
    36ce:	81 93       	st	Z+, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	a1 f7       	brne	.-24     	; 0x36be <itoa+0x1c>
    36d6:	16 f4       	brtc	.+4      	; 0x36dc <itoa+0x3a>
    36d8:	5d e2       	ldi	r21, 0x2D	; 45
    36da:	51 93       	st	Z+, r21
    36dc:	10 82       	st	Z, r1
    36de:	c9 01       	movw	r24, r18
    36e0:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <strrev>

000036e4 <strrev>:
    36e4:	dc 01       	movw	r26, r24
    36e6:	fc 01       	movw	r30, r24
    36e8:	67 2f       	mov	r22, r23
    36ea:	71 91       	ld	r23, Z+
    36ec:	77 23       	and	r23, r23
    36ee:	e1 f7       	brne	.-8      	; 0x36e8 <strrev+0x4>
    36f0:	32 97       	sbiw	r30, 0x02	; 2
    36f2:	04 c0       	rjmp	.+8      	; 0x36fc <strrev+0x18>
    36f4:	7c 91       	ld	r23, X
    36f6:	6d 93       	st	X+, r22
    36f8:	70 83       	st	Z, r23
    36fa:	62 91       	ld	r22, -Z
    36fc:	ae 17       	cp	r26, r30
    36fe:	bf 07       	cpc	r27, r31
    3700:	c8 f3       	brcs	.-14     	; 0x36f4 <strrev+0x10>
    3702:	08 95       	ret

00003704 <__udivmodhi4>:
    3704:	aa 1b       	sub	r26, r26
    3706:	bb 1b       	sub	r27, r27
    3708:	51 e1       	ldi	r21, 0x11	; 17
    370a:	07 c0       	rjmp	.+14     	; 0x371a <__udivmodhi4_ep>

0000370c <__udivmodhi4_loop>:
    370c:	aa 1f       	adc	r26, r26
    370e:	bb 1f       	adc	r27, r27
    3710:	a6 17       	cp	r26, r22
    3712:	b7 07       	cpc	r27, r23
    3714:	10 f0       	brcs	.+4      	; 0x371a <__udivmodhi4_ep>
    3716:	a6 1b       	sub	r26, r22
    3718:	b7 0b       	sbc	r27, r23

0000371a <__udivmodhi4_ep>:
    371a:	88 1f       	adc	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	5a 95       	dec	r21
    3720:	a9 f7       	brne	.-22     	; 0x370c <__udivmodhi4_loop>
    3722:	80 95       	com	r24
    3724:	90 95       	com	r25
    3726:	bc 01       	movw	r22, r24
    3728:	cd 01       	movw	r24, r26
    372a:	08 95       	ret

0000372c <_exit>:
    372c:	f8 94       	cli

0000372e <__stop_program>:
    372e:	ff cf       	rjmp	.-2      	; 0x372e <__stop_program>
